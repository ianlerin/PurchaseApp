@using Microsoft.JSInterop

<textarea @ref="_textareaRef"
          class="@CssClass"
          rows="@Rows"
          placeholder="@Placeholder"
          value="@Value"
          @oninput="OnInput"
          @attributes="AdditionalAttributes"></textarea>

@code {
    private ElementReference _textareaRef;

    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    [Parameter] public string CssClass { get; set; } = "form-control";
    [Parameter] public int Rows { get; set; } = 1;
    [Parameter] public string Placeholder { get; set; }

    // Capture any other HTML attributes (id, style, etc.)
    // From chatGPT, can be removed if redundant
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    [Inject] private IJSRuntime JS { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await ResizeAsync();
    }

    // call whenever user types in the textarea
    private async Task OnInput(ChangeEventArgs e)
    {
        var newValue = e?.Value?.ToString() ?? string.Empty;
        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);
        await ResizeAsync();
    }

    // public method parent can call via @ref
    public async Task ResizeAsync()
    {
        await JS.InvokeVoidAsync("autoResizeTextArea", _textareaRef);
    }
}
