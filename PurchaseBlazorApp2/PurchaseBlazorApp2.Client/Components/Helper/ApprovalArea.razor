@using PurchaseBlazorApp2.Components.Data
@using PurchaseBlazorApp2.Components.Global

<label class="form-label">Approvals:</label>
@for (int i = 0; i < Approvals.Count; i++)
{
    var approval = Approvals[i];
    bool canApprove = approval.CanApprove(MyGlobalVar.UserName.Role);

    <div class="approval-item d-flex flex-column gap-2 mb-2 p-2 border rounded">

        <!-- Approval checkbox -->
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center gap-2">
                <InputCheckbox Value="approval.IsApproved"
                ValueChanged="@((bool val) => OnCheckboxChanged(val, approval))"
                ValueExpression="@(() => approval.IsApproved)"
                class="form-check-input"
                disabled="@(!canApprove)" />
                <div>
                    <small class="text-muted me-1">Approved by:</small>
                    <span class="badge bg-light text-dark">
                        @(!string.IsNullOrEmpty(approval.UserName) ? approval.UserName : "-")
                    </span>
                </div>
            </div>

            <!-- Delete button -->
            <button type="button" class="btn btn-sm btn-outline-danger" disabled="@(!bIsEditable)"
            @onclick="() => DeleteApproval(approval)">
                <i class="bi bi-trash"></i>
            </button>
        </div>

        <!-- Departments section -->
        <div>
            <small class="text-muted">Departments:</small>

            @if (AllowMultipleDepartments)
            {
                <!-- Multi-select version -->
                <MultiSelectEnumDropDown TEnum="EDepartment"
                Value="@approval.Departments"
                ValueChanged="@((List<EDepartment> list) => OnDepartmentsChanged(approval, list))" />
            }
            else
            {
                <!-- Single select version -->
                <InputSelect @bind-Value="approval.Departments[0]" disabled="@(!bIsEditable)">
                    @foreach (var dept in Enum.GetValues<EDepartment>())
                    {
                        <option value="@dept">@dept</option>
                    }
                </InputSelect>
                
            }
        </div>
    </div>
}

<!-- Button to add a new approval row -->
<button class="btn btn-sm btn-outline-primary mt-2" @onclick="AddApproval" disabled="@(!bIsEditable)">
    <i class="bi bi-plus-lg"></i> Add Approval
</button>

@code {
    [Parameter] public List<ApprovalInfo> Approvals { get; set; } = new();
    [Parameter] public ClientGlobalVar MyGlobalVar { get; set; }
    [Parameter] public EventCallback<(bool NewValue, ApprovalInfo Approval)> OnApprovalChanged { get; set; }
    [Parameter] public bool bIsEditable { get; set; } = true;
    [Parameter] public bool AllowMultipleDepartments { get; set; } = true;

    private async Task OnCheckboxChanged(bool newValue, ApprovalInfo approval)
    {
        approval.IsApproved = newValue;
        approval.UserName = newValue
            ? MyGlobalVar?.UserName.Name ?? ""
            : "";
        await OnApprovalChanged.InvokeAsync((newValue, approval));
    }

    private void OnDepartmentsChanged(ApprovalInfo approval, List<EDepartment> newList)
    {
        approval.Departments = newList;
    }

    private void AddApproval()
    {
        Approvals.Add(new ApprovalInfo());
    }

    private void DeleteApproval(ApprovalInfo approval)
    {
        Approvals.Remove(approval);
    }
}
