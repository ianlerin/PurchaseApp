@page "/login"
@page "/authentication/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Graph
@using PurchaseBlazorApp2.Components.Data
@using PurchaseBlazorApp2.Components.Global
@inject HttpClient Http
@inject IJSRuntime JS
@inject IServiceProvider ServiceProvider
@inject NavigationManager NavigationManager
@inject ClientGlobalVar GlobalVar
@inject AuthenticationStateProvider AuthStateProvider

<CascadingAuthenticationState>
    <CascadingValue Value="this">
        @if (authState is null)
        {
            <p>⏳ Loading authentication state...</p>
        }
        else if (!authState.User.Identity?.IsAuthenticated ?? true)
        {
            @if (!startLogin)
            {
                <button class="btn btn-primary" @onclick="StartLogin">
                    🔑 Login
                </button>
            }
            else if (remoteAuthServiceAvailable)
            {
                <!-- Only render RemoteAuthenticatorView if service is available -->
                <RemoteAuthenticatorView Action="login" OnLogInSucceeded="HandleLogInSucceeded" />
            }
            else
            {
                <p class="text-danger">
                    ⚠️ Login service is not available. Please check your MSAL configuration.
                </p>
            }
        }
        else
        {
            <p>✅ You are already logged in as @authState.User.Identity?.Name</p>
        }
    </CascadingValue>
</CascadingAuthenticationState>

@code {
    private AuthenticationState? authState;
    private bool startLogin = false;
    private bool remoteAuthServiceAvailable = false;

    public class GraphUser
    {
        public string DisplayName { get; set; } = "";
        public string JobTitle { get; set; } = "";
        public string Department { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        startLogin = false;

        // Safe check for AuthStateProvider
        try
        {
            authState = await AuthStateProvider.GetAuthenticationStateAsync();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Failed to get auth state: {ex.Message}");
            authState = null;
        }

        // Check if RemoteAuthenticationService is registered
        remoteAuthServiceAvailable = ServiceProvider.GetService<IRemoteAuthenticationService<RemoteAuthenticationState>>() != null;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                authState = await AuthStateProvider.GetAuthenticationStateAsync();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", $"Error fetching auth state: {ex.Message}");
            }
        }

        // Avoid rendering loop, force reload only if not in browser or no auth state
        if (!OperatingSystem.IsBrowser() || authState == null)
        {
            await Task.Delay(1000);
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private void StartLogin() => startLogin = true;


    private async Task HandleLogInSucceeded(RemoteAuthenticationState state)
    {
        await JS.InvokeVoidAsync("console.log", "HandleLogInSucceeded triggered");

        try
        {
            authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState == null)
            {
                await JS.InvokeVoidAsync("console.log", "HandleLogInSucceeded: no auth state");
                return;
            }

            if (authState.User.Identity?.IsAuthenticated != true)
            {
                await JS.InvokeVoidAsync("console.log", "HandleLogInSucceeded: not authenticated");
                return;
            }

            await JS.InvokeVoidAsync("console.log", "HandleLogInSucceeded: user authenticated");

            var tokenProvider = ServiceProvider.GetService<IAccessTokenProvider>();
            if (tokenProvider == null)
            {
                await JS.InvokeVoidAsync("console.log", "HandleLogInSucceeded: no token provider");
                return;
            }

            var tokenResult = await tokenProvider.RequestAccessToken();
            if (!tokenResult.TryGetToken(out var token))
            {
                await JS.InvokeVoidAsync("console.log", "HandleLogInSucceeded: failed to get token");
                return;
            }

            await JS.InvokeVoidAsync("console.log", $"✅ Access token acquired: {token.Value[..20]}...");

            // --- 🔹 Retrieve user info from Microsoft Graph ---
            string jobTitle = "(No Job Title)";
            string department = "(No Department)";
            string displayName = authState.User.Identity?.Name ?? "(Unknown User)";

            try
            {

                var request = new HttpRequestMessage(HttpMethod.Get, "https://graph.microsoft.com/v1.0/me?$select=displayName,jobTitle,department,mail,userPrincipalName");
                request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Value);

                var response = await Http.SendAsync(request);
                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    var me = await response.Content.ReadFromJsonAsync<GraphUser>();
                    department = me.Department;
                    jobTitle = me.JobTitle;
                    await JS.InvokeVoidAsync("console.log", $"Graph /me: {json}");
                }
                else
                {
                    await JS.InvokeVoidAsync("console.error", $"Graph API failed: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", $"❌ Failed to retrieve Microsoft Graph user info: {ex.Message}");
            }

            // --- 🔹 Retrieve department from your backend ---
            string email = authState.User.FindFirst(c => c.Type == "preferred_username" || c.Type == "email")?.Value ?? "";
            EDepartment MyDepartment = EDepartment.NotSpecified;

            try
            {
                var response = await Http.PostAsJsonAsync(
                    NavigationManager.ToAbsoluteUri("api/login/getrole"),
                    email
                );
                MyDepartment = await response.Content.ReadFromJsonAsync<EDepartment>();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", $"Error retrieving department from backend: {ex.Message}");
            }

            // --- 🔹 Build and store user data ---
            var MyUser = new UserName(displayName, "")
                {
                    Role = MyDepartment,
                    JobTitle = jobTitle,
                    Department = department
                };

            if (JS != null)
            {
                await JS.InvokeVoidAsync("console.log", "Setting cookie for user");
                string jsonUser = System.Text.Json.JsonSerializer.Serialize(MyUser);
                await JS.InvokeVoidAsync("setCookie", "userKey", jsonUser, 1);
            }

            GlobalVar?.SetUser(MyUser);
            GlobalVar?.StartTokenRefreshLoop(tokenProvider);

            await JS.InvokeVoidAsync("console.log", $"👤 Logged in as: {displayName}");

            // --- 🔹 Handle return URL redirection ---
            var uri = new Uri(NavigationManager.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var returnUrl = query["returnUrl"];

            if (!string.IsNullOrEmpty(returnUrl))
            {
                if (!returnUrl.StartsWith("/"))
                    returnUrl = "/" + returnUrl;

                NavigationManager.NavigateTo(returnUrl, forceLoad: true);
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"❌ Error during HandleLogInSucceeded: {ex.Message}");
        }
    }
}
