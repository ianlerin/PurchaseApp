@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PurchaseBlazorApp2.Components.Global
@inject IJSRuntime JS
@inject IServiceProvider ServiceProvider
@inject ClientGlobalVar GlobalVar
@inject AuthenticationStateProvider AuthStateProvider

<CascadingAuthenticationState>
    <CascadingValue Value="this">
        @if (authState is null)
        {
            <p>Loading authentication state...</p>
        }
        else if (!authState.User.Identity?.IsAuthenticated ?? true)
        {
            <RemoteAuthenticatorView Action="login" OnLogInSucceeded="HandleLogInSucceeded" />
        }
        else
        {
            <p>You are already logged in as @authState.User.Identity?.Name</p>
        }
    </CascadingValue>
</CascadingAuthenticationState>

@code {
    private AuthenticationState? authState;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthStateProvider.GetAuthenticationStateAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Only fetch auth state on the client
            if (!OperatingSystem.IsBrowser())
                return;

            try
            {
                authState = await AuthStateProvider.GetAuthenticationStateAsync();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", $"Error fetching auth state: {ex.Message}");
            }
        }
    }
    private async Task HandleLogInSucceeded(RemoteAuthenticationState state)
    {
        authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity?.IsAuthenticated == true)
        {
            // Now token provider should be available
            var tokenProvider = ServiceProvider.GetService<IAccessTokenProvider>();

            if (tokenProvider != null)
            {
                var tokenResult = await tokenProvider.RequestAccessToken();
                if (tokenResult.TryGetToken(out var token))
                {
                    await JS.InvokeVoidAsync("console.log", $"✅ Access token acquired: {token.Value.Substring(0, 20)}...");
                }
            }

            GlobalVar.SetUser(new UserName(authState.User.Identity.Name ?? "", ""));
            await JS.InvokeVoidAsync("console.log", $"👤 Logged in as: {authState.User.Identity.Name}");
            StateHasChanged();
        }
    }
}