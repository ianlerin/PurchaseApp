@page "/purchaserequisitionrecords_client/create"
@page "/purchaserequisitionrecords_client/create/{RequisitionNumber}"
@page "/"
@using PurchaseBlazorApp2.Components.Data
@using PurchaseBlazorApp2.Components.Global
@using Radzen
@using Radzen.Blazor
@inject ClientGlobalVar GlobalVar
@inject HttpClient Http
@inject ClientStateStorage StateStorage
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>PurchaseRequisitionRecord</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="PurchaseRequisitionRecord" OnValidSubmit="AddPurchaseRequisitionRecord" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class ="mb-3">
                @if (!string.IsNullOrEmpty(PurchaseRequisitionRecord.RequisitionNumber))
                {
                    <label for="ID" class="form-label">ID:</label>
                    <InputText id="ID" @bind-Value="PurchaseRequisitionRecord.RequisitionNumber" class="form-control" />
                }
            </div>
            <div class="mb-3">
                <label for="requestdate" class="form-label">RequestDate:</label>
                <InputDate id="requestdate" @bind-Value="PurchaseRequisitionRecord.RequestDate" class="form-control" />
                <ValidationMessage For="() => PurchaseRequisitionRecord.RequestDate" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="purpose" class="form-label">Purpose:</label>
                <InputText id="purpose" @bind-Value="PurchaseRequisitionRecord.Purpose" class="form-control" />
                <ValidationMessage For="() => PurchaseRequisitionRecord.Purpose" class="text-danger" />
            </div>
            <div class="mb-3">
                <label class="form-label">Item Requested:</label>

                @foreach (var item in PurchaseRequisitionRecord.ItemRequested)
                {
                    var index = PurchaseRequisitionRecord.ItemRequested.IndexOf(item);

                    <div class="mb-3 border p-3 rounded">
                        <div class="row mb-2">
                            <div class="col-md-4">
                                <label class="form-label">Item</label>
                                <InputText @bind-Value="item.RequestItem" class="form-control" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">UnitPrice</label>
                                <InputNumber @bind-Value="item.UnitPrice" class="form-control" />
                                <ValidationMessage For="@(() => item.UnitPrice)" class="text-danger" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Quantity</label>
                                <InputNumber @bind-Value="item.Quantity" class="form-control" />
                                <ValidationMessage For="@(() => item.Quantity)" class="text-danger" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">TotalPrice</label>
                                <InputNumber @bind-Value="item.TotalPrice" class="form-control" />
                                <ValidationMessage For="@(() => item.TotalPrice)" class="text-danger" />
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button type="button" class="btn btn-danger w-100" @onclick="() => RemoveItem(index)">Remove</button>
                            </div>
                        </div>
                    </div>
                }

                <button type="button" class="btn btn-primary" @onclick="AddItem">Add Item</button>
            </div>
            <div class="mb-3">
                <label for="department" class="form-label">Department:</label>
                <PurchaseBlazorApp2.Client.Components.Helper.EnumDropDownBox @bind-Value="PurchaseRequisitionRecord.Department" TEnum="PurchaseBlazorApp2.Components.Data.EDepartment"></PurchaseBlazorApp2.Client.Components.Helper.EnumDropDownBox>
                <ValidationMessage For="() => PurchaseRequisitionRecord.Department" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="tasktype" class="form-label">TaskType:</label>
                <PurchaseBlazorApp2.Client.Components.Helper.EnumDropDownBox @bind-Value="PurchaseRequisitionRecord.TaskType" TEnum="PurchaseBlazorApp2.Components.Data.ETask"></PurchaseBlazorApp2.Client.Components.Helper.EnumDropDownBox>
                <ValidationMessage For="() => PurchaseRequisitionRecord.TaskType" class="text-danger" />
            </div>
            <div class="mb-3">
                <PurchaseBlazorApp2.Client.Components.Helper.ApprovalArea Approvals="PurchaseRequisitionRecord.Approvals" MyGlobalVar="GlobalVar" OnApprovalChanged="OnCheckboxChanged"></PurchaseBlazorApp2.Client.Components.Helper.ApprovalArea>

            </div>

            <PurchaseBlazorApp2.Client.Components.Helper.UploadImageHelper UploadedImages="PurchaseRequisitionRecord.SupportDocuments"></PurchaseBlazorApp2.Client.Components.Helper.UploadImageHelper>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>


    </div>
</div>

<div>
    <button @onclick="OnPrintPDF">Print PDF</button>
</div>


@code {
    private Guid inputFileKey = Guid.NewGuid();
    [Parameter] public string RequisitionNumber { get; set; }

    [SupplyParameterFromForm]
    private PurchaseRequisitionRecord PurchaseRequisitionRecord { get; set; } = new();
    [Inject] IJSRuntime JS { get; set; }
    private async Task AddPurchaseRequisitionRecord()
    {

        PurchaseRequisitionRecord.Requestor = GlobalVar?.UserName.Name ?? "";
        Console.WriteLine(NavigationManager.ToAbsoluteUri("api/pr/submit"));
        var response = await Http.PostAsJsonAsync(
            NavigationManager.ToAbsoluteUri("api/pr/submit"),
            new List<PurchaseRequisitionRecord> { PurchaseRequisitionRecord });

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Submission successful!");
        }
        else
        {
            string errorDetails = await response.Content.ReadAsStringAsync();
            string message = $"Submission failed. Status Code: {(int)response.StatusCode} - {response.ReasonPhrase}\nDetails: {errorDetails}";

            await JS.InvokeVoidAsync("alert", message);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        if (!string.IsNullOrEmpty(RequisitionNumber))
        {
            var FoundPRRecord = StateStorage.Get<PurchaseRequisitionRecord>("PR");
            if (FoundPRRecord!=null&&FoundPRRecord.RequisitionNumber == RequisitionNumber)
            {
                PurchaseRequisitionRecord = FoundPRRecord;
            }
            else
            {
                var response = await Http.PostAsJsonAsync(
                NavigationManager.ToAbsoluteUri("api/pr/get-detail"), new List<string> { RequisitionNumber });
                if (response.IsSuccessStatusCode)
                {
                    try
                    {
                        var Lists = await response.Content.ReadFromJsonAsync<List<PurchaseRequisitionRecord>>();
                        if(Lists.Count>0)
                        {
                            PurchaseRequisitionRecord = Lists[0];
                        }

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error deserializing response: {ex.Message}");
                      
                    }
                }
            }
        }
        stopwatch.Stop();
        Console.WriteLine($"OnInitializedAsync took {stopwatch.ElapsedMilliseconds} ms");
        
    }

    private Task OnInputChange(ChangeEventArgs args, ApprovalInfo approval)
    {
        bool isChecked = (bool)args.Value;

        if (isChecked)
            approval.UserName = GlobalVar?.UserName.Name ?? "";
        else
            approval.UserName = "";

        return Task.CompletedTask;
    }

    private Task OnCheckboxChanged((bool NewValue, ApprovalInfo Approval) args)
    {
        PurchaseRequisitionRecord.OnApprovalChanged();
        return Task.CompletedTask;
    }

    private Task AddItem(MouseEventArgs args)
    {
        RequestItemInfo ItemInfo = new RequestItemInfo();
        PurchaseRequisitionRecord.ItemRequested.Add(ItemInfo);
        return Task.CompletedTask;
    }

    private Task RemoveItem(int i)
    {
        PurchaseRequisitionRecord.ItemRequested.RemoveAt(i);
        return Task.CompletedTask;
    }
    private void OnPrintPDF()
    {
        StateStorage.Set("PR", PurchaseRequisitionRecord);
        NavigationManager.NavigateTo($"/purchaseorder_client/print/{PurchaseRequisitionRecord.RequisitionNumber}");
      
    }
}