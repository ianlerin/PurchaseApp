@page "/purchaserequisitionrecords_client/create"

@page "/purchaserequisitionrecords_client/create/{RequisitionNumber}"
@using Genesis.EmailService
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PurchaseBlazorApp2.Client.Pages.Quotation
@using PurchaseBlazorApp2.Components.Data
@using PurchaseBlazorApp2.Components.Global
@using System.Globalization;
@using Radzen
@using Radzen.Blazor
@using static PurchaseBlazorApp2.Client.Pages.Quotation.QuotationInfo
@inject ClientGlobalVar GlobalVar
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject ClientStateStorage StateStorage
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider
@rendermode InteractiveAuto

<PageTitle>Create</PageTitle>

<h1 class="mb-3">Create</h1>
<hr />

<div class="row">
    <div class="col-md-10">
        <EditForm Model="PurchaseRequisitionRecord" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

          
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white fw-bold">
                    General PR Information
                </div>
                <div class="card-body">

                    <!-- Requisition ID -->
                    @if (!string.IsNullOrEmpty(PurchaseRequisitionRecord.RequisitionNumber))
                    {
                        <div class="mb-3">
                            <label class="form-label">PR ID:</label>
                            <InputText class="form-control"
                                       @bind-Value="PurchaseRequisitionRecord.RequisitionNumber"
                                       readonly />
                        </div>
                    }

                    <!-- Request Date -->
                    <div class="mb-3">
                        <label class="form-label">Request Date:</label>
                        <InputDate @bind-Value="PurchaseRequisitionRecord.RequestDate"
                                   class="form-control"
                                   disabled="@(!bNewRequisition)" />
                        <ValidationMessage For="() => PurchaseRequisitionRecord.RequestDate"
                                           class="text-danger" />
                    </div>

                    <!-- Item List -->
                    <div class="mb-4">
                        <label class="form-label fw-bold">Item Requested:</label>

                        @foreach (var item in PurchaseRequisitionRecord.ItemRequested)
                        {
                            var index = PurchaseRequisitionRecord.ItemRequested.IndexOf(item);

                            <div class="border rounded p-3 mb-3 bg-light">
                                <div class="row g-3 mb-2">
                                    <div class="col-md-6">
                                        <label class="form-label">Item</label>
                                        <ResizableInputTextArea @bind-Value="item.RequestItem"
                                                                CssClass="form-control"
                                                                Rows="1"
                                                                Placeholder="Enter item descriptions here..."
                                                                disabled="@(!bNewRequisition)" />
                                        <ValidationMessage For="@(() => item.RequestItem)"
                                                           class="text-danger" />
                                    </div>

                                    <div class="col-md-2">
                                        <label class="form-label">Currency</label>
                                        <RadzenDropDown @bind-Value="item.Currency"
                                                        Data="@CurrencyList"
                                                        TextProperty="Text"
                                                        ValueProperty="Value"
                                                        AllowFiltering="true"
                                                        Disabled="true" />
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Unit Price</label>
                                        <InputNumber @bind-Value="item.UnitPrice"
                                                     class="form-control"
                                                     readonly />
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Quantity</label>
                                        <InputNumber @bind-Value="item.Quantity"
                                                     class="form-control"
                                                    />
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Total Price</label>
                                        <InputNumber @bind-Value="item.TotalPrice"
                                                     class="form-control"
                                                     readonly />
                                                     </div>

                                    <div class="col-md-2 d-flex align-items-end">
                                        <button type="button"
                                                class="btn btn-danger w-100"
                                                @onclick="() => RemoveItem(index)"
                                                disabled="@(!bNewRequisition)">
                                            Remove
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }

                        <button type="button"
                                class="btn btn-primary"
                                @onclick="AddItem"
                                disabled="@(!bNewRequisition)">
                            Add Item
                        </button>
                    </div>

                    <!-- Purpose -->
                    <div class="mb-3">
                        <label class="form-label">Purpose:</label>
                        <InputText class="form-control"
                                   @bind-Value="PurchaseRequisitionRecord.Purpose"
                                   disabled="@(!bNewRequisition)" />
                        <ValidationMessage For="() => PurchaseRequisitionRecord.Purpose"
                                           class="text-danger" />
                    </div>

                    <!-- Department -->
                    <div class="mb-3">
                        <label class="form-label">Department:</label>
                        <InputText class="form-control"
                                   @bind-Value="PurchaseRequisitionRecord.Department"
                                   readonly />
                    </div>

                    <!-- Urgent Checkbox -->
                    <div class="form-check mb-2">
                        <InputCheckbox id="burgent"
                                       @bind-Value="PurchaseRequisitionRecord.burgent"
                                       class="form-check-input"
                                       disabled="@(!bNewRequisition)" />
                        <label for="burgent" class="form-check-label">Urgent</label>
                    </div>
                </div>
            </div>

            <!-- ================================= -->
            <!-- 🖼️ 2️⃣ IMAGE REFERENCE -->
            <!-- ================================= -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-info text-white fw-bold">
                    Image Reference
                </div>
                <div class="card-body">
                    <PurchaseBlazorApp2.Client.Components.Helper.UploadImageHelper
                        bNewRequisition=bNewRequisition
                        UploadedImages="PurchaseRequisitionRecord.SupportDocuments" />
                </div>
            </div>

            <!-- ================================= -->
            <!-- 📑 3️⃣ QUOTATION REFERENCE -->
            <!-- ================================= -->
            @if (bIsDepartmentMatchApproval)
            {
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-secondary text-white fw-bold">
                        Quotation Reference
                    </div>
                    <div class="card-body">
                        <QuotationPage PrId="@RequisitionNumber" bnewrequisition=false />
                    </div>
                </div>
            }

            <!-- ================================= -->
            <!-- ⚙️ 4️⃣ OTHERS / ACTIONS -->
            <!-- ================================= -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-success text-white fw-bold">
                    Actions & Status
                </div>
                <div class="card-body">

                    <div class="d-flex flex-wrap gap-3 align-items-center my-3">
                        @if (bNewRequisition)
                        {
                            <button type="submit" class="btn btn-primary btn-lg"
                                    @onclick="AddPurchaseRequisitionRecord">
                                Create
                            </button>
                            <button type="button" class="btn btn-outline-primary btn-lg"
                                    @onclick="SaveAsDraft">
                                Save Draft
                            </button>
                        }

                        @if (bIsProcurementManager && !bCanEditApproval && IsSubmitted() && 
                             !string.IsNullOrEmpty(PurchaseRequisitionRecord.Rejectreason))
                        {
                            if (PurchaseRequisitionRecord.approvalstatus == EApprovalStatus.Rejected)
                            {
                                <div class="form-group mt-3">
                                    <label class="form-label">Reject Reason</label>
                                    <InputText @bind-Value="PurchaseRequisitionRecord.Rejectreason"
                                               class="form-control"
                                               readonly />
                                </div>
                            }
                        }

                        @if (bCanOpenPO && bIsProcurementManager)
                        {
                            <button @onclick="OnPrintPDF" class="btn btn-primary btn-lg">
                                View PO
                            </button>
                        }

                        @if (bIsDepartmentMatchApproval && bHaventApproveOrReject)
                        {
                            <button @onclick="OnApprove" class="btn btn-success btn-lg">
                                Approve
                            </button>
                            <button @onclick="OnReject" class="btn btn-danger btn-lg">
                                Reject
                            </button>

                            <div class="form-group mt-3">
                                <label class="form-label">Reject Reason</label>
                                <InputText @bind-Value="PurchaseRequisitionRecord.Rejectreason"
                                           class="form-control" />
                            </div>
                        }
                    </div>

                    <!-- Email Status -->
                    <div class="mt-3">
                        <label class="form-label fw-bold">Email Send Status:</label>
                        <textarea readonly rows="6" cols="60" class="form-control">
                            @EmailSendStatus
                        </textarea>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>


@code {
    private Guid inputFileKey = Guid.NewGuid();
    [Parameter] public string RequisitionNumber { get; set; }

    [SupplyParameterFromForm]
    private PurchaseRequisitionRecord PurchaseRequisitionRecord { get; set; } = new();
    [Inject] IJSRuntime JS { get; set; }
    private bool bNewRequisition = false;
    private bool bCanOpenPO;
    private bool bHaventApproveOrReject;
    private string EmailSendStatus;
    private EmailWorkflowService MyEmailHelper;
    private bool bCanEditApproval;
    private bool bIsProcurementManager;

    private bool bIsDepartmentMatchApproval;
    UserName? MyUser;
    public class CurrencyItem
    {
        public string Text { get; set; } = string.Empty;  // "US Dollar (USD)"
        public string Value { get; set; } = string.Empty; // "USD"
    }

    private List<CurrencyItem> CurrencyList = CultureInfo
        .GetCultures(CultureTypes.AllCultures)
        .Select(c =>
        {
            try
            {
                var region = new RegionInfo(c.Name);
                return new CurrencyItem
                    {
                        Text = $"{region.CurrencyEnglishName} ({region.ISOCurrencySymbol})",
                        Value = region.ISOCurrencySymbol
                    };
            }
            catch
            {
                return null;
            }
        })
        .Where(x => x != null)
        .GroupBy(x => x.Value)  // remove duplicates
        .Select(g => g.First())
        .OrderBy(x => x.Text)
        .ToList();
    private List<CurrencyItem> filteredCurrencyList;


    private async Task SetUserName()
    {
        string userKey = await JS.InvokeAsync<string>("getCookie", "userKey");

        await JS.InvokeVoidAsync("console.log", $"SetUserName{userKey}");
        MyUser = System.Text.Json.JsonSerializer.Deserialize<UserName>(userKey);

    }


    private async Task<UserName?> GetCurrentUser()
    {
        UserName restoredUser = new UserName();
        var json = await JS.InvokeAsync<string>("getCookie", "userKey");
        if (!string.IsNullOrWhiteSpace(json))
        {
            try
            {
                restoredUser = System.Text.Json.JsonSerializer.Deserialize<UserName>(json);

            }
            catch (Exception Ex)
            {

            }
        }
        return restoredUser;
    }



    private async Task<string?> GetCurrentEmail()
    {
        UserName restoredUser = await GetCurrentUser();

        return restoredUser.Email;
    }


    private async Task<EDepartment> GetCurrentDepartmentRole()
    {
        EDepartment role = EDepartment.NotSpecified;
        var json = await JS.InvokeAsync<string>("getCookie", "userKey");
        if (!string.IsNullOrWhiteSpace(json))
        {
            try
            {
                UserName restoredUser = System.Text.Json.JsonSerializer.Deserialize<UserName>(json);
                if (restoredUser != null)
                {
                    role = restoredUser.Role;
                }
            }
            catch(Exception Ex)
            {

            }
        }
        return role;
    }

    private async Task AddPurchaseRequisitionRecord()
    {
        PurchaseRequisitionRecord.OnApprovalChanged();

        PurchaseRequisitionRecord.OnUpdatePRStatus();

        if (PurchaseRequisitionRecord==null)
        {

            await JS.InvokeVoidAsync("alert", "null PurchaseRequisitionRecord!");
        }
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            string email = user.FindFirst(c => c.Type == "preferred_username" || c.Type == "email")?.Value;

            PurchaseRequisitionRecord.Requestor = email ?? "Unknown";
        }
        if(PurchaseRequisitionRecord.approvalstatus==EApprovalStatus.Creation)
        {
            PurchaseRequisitionRecord.approvalstatus = EApprovalStatus.PreApproval;
        }
      
        PurchaseRequisitionRecord.UpdateDate = DateTime.Now;
        var response = await Http.PostAsJsonAsync(
            NavigationManager.ToAbsoluteUri("api/pr/submit"),
            new List<PurchaseRequisitionRecord> { PurchaseRequisitionRecord });

        if (response.IsSuccessStatusCode)
        {
            var PR_Ids = await response.Content.ReadFromJsonAsync<List<string>>();
            if(PR_Ids.Count>0)
            {
                PurchaseRequisitionRecord.RequisitionNumber=PR_Ids[0];
            }

            await MyEmailHelper.SendEmailToRelevantPartyAsync(PurchaseRequisitionRecord);
            StateStorage.Remove("PR");

            await JS.InvokeVoidAsync("alert", "Purchase Requisition submitted successfully!");
        }
        else
        {
            string errorDetails = await response.Content.ReadAsStringAsync();
            string message = $"Submission failed. Status Code: {(int)response.StatusCode} - {response.ReasonPhrase}\nDetails: {errorDetails}";

            await JS.InvokeVoidAsync("alert", message);
        }


        StateHasChanged();
    }

    private bool IsSubmitted()
    {
        if (!string.IsNullOrEmpty(RequisitionNumber))
        {
            return true;
        }
        return false;
    }


    protected override async Task OnInitializedAsync()
    {
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();
        filteredCurrencyList = CurrencyList;
        EDepartment MyDepartment = await GetCurrentDepartmentRole();
        bIsProcurementManager = (MyDepartment == EDepartment.ProcurementManager);

        if (!string.IsNullOrEmpty(RequisitionNumber))
        {
            bNewRequisition = false;
            var FoundPRRecord = StateStorage.Get<PurchaseRequisitionRecord>("PR");
            if (FoundPRRecord!=null&&FoundPRRecord.RequisitionNumber == RequisitionNumber)
            {
                PurchaseRequisitionRecord = FoundPRRecord;
            }
            else
            {
                var response = await Http.PostAsJsonAsync(
                NavigationManager.ToAbsoluteUri("api/pr/get-detail"), new List<string> { RequisitionNumber });
                if (response.IsSuccessStatusCode)
                {
                    try
                    {
                        var Lists = await response.Content.ReadFromJsonAsync<List<PurchaseRequisitionRecord>>();
                        if(Lists.Count>0)
                        {
                            PurchaseRequisitionRecord = Lists[0];
                        }

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error deserializing response: {ex.Message}");

                    }
                }
            }
            if(PurchaseRequisitionRecord!=null)
            {
                foreach (var approval in PurchaseRequisitionRecord.Approvals)
                {
                    if(approval.Departments.Contains(MyDepartment))
                    {
                        bIsDepartmentMatchApproval = true;
                    }
                }
            }

        }
        // if new create
        else
        {
            PurchaseRequisitionRecord FindRecord;
            bool bFound=StateStorage.TryGet<PurchaseRequisitionRecord>("PR", out FindRecord);
            if(bFound)
            {
                PurchaseRequisitionRecord = FindRecord;

            }
            bNewRequisition = true;
            await SetUserName();
            PurchaseRequisitionRecord.Department = MyUser.Department;
        }
        if (PurchaseRequisitionRecord.approvalstatus == EApprovalStatus.Rejected || PurchaseRequisitionRecord.approvalstatus == EApprovalStatus.Approved)
        {
            bHaventApproveOrReject = false;
        }
        else
        {
            bHaventApproveOrReject = true;
        }

        bCanOpenPO = (PurchaseRequisitionRecord.prstatus == EPRStatus.ApprovedRequests);
        stopwatch.Stop();
        Console.WriteLine($"OnInitializedAsync took {stopwatch.ElapsedMilliseconds} ms");
        MyEmailHelper = new EmailWorkflowService(Http, NavigationManager, JS);

        UpdatebCanEditApproval();
    }


    private void UpdatebCanEditApproval()
    {
        if(PurchaseRequisitionRecord==null)
        {
            bCanEditApproval = false;
            return;
        }
        foreach(var Approval in PurchaseRequisitionRecord.Approvals)
        {
            if(Approval.ApproveStatus!=ESingleApprovalStatus.PendingAction)
            {
                bCanEditApproval = false;
                return;
            }
        }
        if(PurchaseRequisitionRecord.approvalstatus==EApprovalStatus.PreApproval)
        {
            bCanEditApproval = true;
        }

    }

    private async void OnApprove()
    {
        EDepartment MyDepartment = await GetCurrentDepartmentRole();
        foreach (var approval in PurchaseRequisitionRecord.Approvals)
        {
            if (approval.Departments.Contains(MyDepartment))
            {
                approval.ApproveStatus = ESingleApprovalStatus.Approved;
                UserName MyUser = await GetCurrentUser();
                await JS.InvokeVoidAsync("console.log", $"OnApprove: {MyUser.Name}");
                approval.UserName = MyUser.Name;
            }
        }
        PurchaseRequisitionRecord.OnUpdatePRStatus();
        PurchaseRequisitionRecord.OnApprovalChanged();
        await AddPurchaseRequisitionRecord();
    }

    private async void OnReject()
    {
        EDepartment MyDepartment = await GetCurrentDepartmentRole();
        foreach (var approval in PurchaseRequisitionRecord.Approvals)
        {
            if (approval.Departments.Contains(MyDepartment))
            {
                approval.ApproveStatus = ESingleApprovalStatus.Rejected;
                UserName MyUser = await GetCurrentUser();
                await JS.InvokeVoidAsync("console.log", $"OnApprove: {MyUser.Name}");
                approval.UserName = MyUser.Name;
            }
        }
        PurchaseRequisitionRecord.OnUpdatePRStatus();
        PurchaseRequisitionRecord.OnApprovalChanged();
        bHaventApproveOrReject = false;
        await AddPurchaseRequisitionRecord();
        StateHasChanged();
    }

    private Task OnInputChange(ChangeEventArgs args, ApprovalInfo approval)
    {
        bool isChecked = (bool)args.Value;

        if (isChecked)
            approval.UserName = GlobalVar?.UserName.Name ?? "";
        else
            approval.UserName = "";

        return Task.CompletedTask;
    }

    private Task OnCheckboxChanged((bool NewValue, ApprovalInfo Approval) args)
    {
        PurchaseRequisitionRecord.OnApprovalChanged();
        return Task.CompletedTask;
    }

    private Task AddItem(MouseEventArgs args)
    {
        RequestItemInfo ItemInfo = new RequestItemInfo();
        PurchaseRequisitionRecord.ItemRequested.Add(ItemInfo);
        return Task.CompletedTask;
    }

    private Task RemoveItem(int i)
    {
        PurchaseRequisitionRecord.ItemRequested.RemoveAt(i);
        return Task.CompletedTask;
    }
    private void OnPrintPDF()
    {
        if (!IsSubmitted())
        {
            StateStorage.Set("PR", PurchaseRequisitionRecord);
        }
        NavigationManager.NavigateTo($"/purchaseorder_client/print/{PurchaseRequisitionRecord.RequisitionNumber}");

    }

    private void SaveAsDraft()
    {
        StateStorage.Set("PR", PurchaseRequisitionRecord);

    }
    /*
    private void LoadDraft()
    {
        bool bTrue=StateStorage.TryGet<PurchaseRequisitionRecord>("PR_Draft", out PurchaseRequisitionRecord Found);
        if(bTrue)
        {
            PurchaseRequisitionRecord = Found;
        }
    }
    */
}