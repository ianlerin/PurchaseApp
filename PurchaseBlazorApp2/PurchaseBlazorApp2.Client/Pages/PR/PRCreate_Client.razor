@page "/purchaserequisitionrecords_client/create"

@page "/purchaserequisitionrecords_client/create/{RequisitionNumber}"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PurchaseBlazorApp2.Components.Data
@using PurchaseBlazorApp2.Components.Global
@using System.Globalization;
@using Radzen
@using Radzen.Blazor
@using static PurchaseBlazorApp2.Client.Pages.Quotation.QuotationInfo
@inject ClientGlobalVar GlobalVar
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject ClientStateStorage StateStorage
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider
@rendermode InteractiveAuto

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Purchase Requisition Record</h2>
<hr />
<div class="row">
    <div class="col-md-10">
        <EditForm Model="PurchaseRequisitionRecord" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="row mb-4">
                <div class="col-md-4">
                    @if (!string.IsNullOrEmpty(PurchaseRequisitionRecord.RequisitionNumber))
                    {
                        <label for="ID" class="form-label">ID:</label>
                        <InputText id="ID" @bind-Value="PurchaseRequisitionRecord.RequisitionNumber"
                        class="form-control" readonly />
                    }
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-4">
                    <label for="requestdate" class="form-label">Request Date:</label>
                    <InputDate id="requestdate"
                    @bind-Value="PurchaseRequisitionRecord.RequestDate"
                    class="form-control"
                    disabled="@(!bNewRequisition)" />
                    <ValidationMessage For="() => PurchaseRequisitionRecord.RequestDate" class="text-danger" />
                </div>
            </div>



            <!-- Items Section -->
            <div class="mb-3">
                <label class="form-label me-3">Item Requested:</label>

                @foreach (var item in PurchaseRequisitionRecord.ItemRequested)
                {
                    var index = PurchaseRequisitionRecord.ItemRequested.IndexOf(item);

                    <div class="mb-3 border p-3 rounded bg-light">
                        <div class="row g-3 mb-2">
                            <div class="col-md-6">
                                <label class="form-label">Item</label>
                                <ResizableInputTextArea @bind-Value="item.RequestItem"
                                CssClass="form-control"
                                Rows="1"
                                Placeholder="Enter item descriptions here..."
                                disabled="@(!bNewRequisition)" />

                                <ValidationMessage For="@(() => item.RequestItem)" class="text-danger" />
                            </div>
                            <div class="col-md-2 d-flex flex-column">
                                <label class="form-label mb-1">Currency</label>
                                <RadzenDropDown @bind-Value="item.Currency"
                                Data="@CurrencyList"
                                TextProperty="Text"
                                ValueProperty="Value"
                                AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Placeholder="Select currency" />
                            </div>

                            <div class="col-md-2">
                                <label class="form-label">Unit Price</label>
                                <InputNumber @bind-Value="item.UnitPrice"
                                class="form-control"
                                disabled="@(!bNewRequisition)" />
                                <ValidationMessage For="@(() => item.UnitPrice)" class="text-danger" />
                            </div>



                            <div class="col-md-2">
                                <label class="form-label">Quantity</label>
                                <InputNumber @bind-Value="item.Quantity"
                                class="form-control"
                                disabled="@(!bNewRequisition)" />
                                <ValidationMessage For="@(() => item.Quantity)" class="text-danger" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Total Price</label>
                                <InputNumber @bind-Value="item.TotalPrice"
                                class="form-control"
                                disabled="@(!bNewRequisition)" />
                                <ValidationMessage For="@(() => item.TotalPrice)" class="text-danger" />
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button type="button" class="btn btn-danger w-100"
                                @onclick="() => RemoveItem(index)"
                                disabled="@(!bNewRequisition)">
                                    Remove
                                </button>
                            </div>
                        </div>
                    </div>
                }

                <button type="button"
                class="btn btn-primary"
                @onclick="AddItem"
                disabled="@(!bNewRequisition)">
                    Add Item
                </button>
            </div>
            <div class="mb-3">
                <label for="purpose" class="form-label">Purpose:</label>
                <InputText id="purpose"
                @bind-Value="PurchaseRequisitionRecord.Purpose"
                class="form-control"
                disabled="@(!bNewRequisition)" />
                <ValidationMessage For="() => PurchaseRequisitionRecord.Purpose" class="text-danger" />
            </div>
            <!-- Department -->
            <div class="row mb-3">
                <div class="col-md-4">

                    <InputText id="purpose"
                    @bind-Value="PurchaseRequisitionRecord.Department"
                    class="form-control"
                    readonly />
                </div>
            </div>

            <div class="mb-3 form-check">
                <InputCheckbox id="burgent"
                @bind-Value="PurchaseRequisitionRecord.burgent"
                class="form-check-input"
                disabled="@(!bNewRequisition)" />
                <label for="burgent" class="form-check-label">Urgent</label>
            </div>


            @if (bIsProcurementManager && PurchaseRequisitionRecord.approvalstatus==EApprovalStatus.PreApproval)
            {
                <!-- Approvals -->
                <div class="mb-3">
                    <PurchaseBlazorApp2.Client.Components.Helper.ApprovalArea Approvals="PurchaseRequisitionRecord.Approvals"
                    bIsEditable="bIsProcurementManager&&bCanEditApproval"
                    MyGlobalVar="GlobalVar" OnApprovalChanged="OnCheckboxChanged">
                    </PurchaseBlazorApp2.Client.Components.Helper.ApprovalArea>
                </div>

            }


            <PurchaseBlazorApp2.Client.Components.Helper.UploadImageHelper bNewRequisition=bNewRequisition UploadedImages="PurchaseRequisitionRecord.SupportDocuments"></PurchaseBlazorApp2.Client.Components.Helper.UploadImageHelper>
            <div class="d-flex flex-wrap gap-3 align-items-center my-3">

                @if (bNewRequisition)
                {
                    <button type="submit" class="btn btn-primary btn-lg" @onclick="AddPurchaseRequisitionRecord">
                        Create
                    </button>
                    <button type="button" class="btn btn-primary btn-lg" @onclick="SaveAsDraft">Save Draft</button>
                    <button @onclick="OnQuotation" type="button" class="btn btn-secondary btn-lg">
                        Quotation
                    </button>
                }
                @if (bIsProcurementManager && bCanEditApproval && IsSubmitted())
                {
                    <button type="submit" class="btn btn-primary btn-lg" @onclick="AddPurchaseRequisitionRecord">
                        Edit
                    </button>
                    <button @onclick="OnQuotation" type="button" class="btn btn-secondary btn-lg">
                        Quotation
                    </button>
                }
                @if (bIsProcurementManager && !bCanEditApproval && IsSubmitted() && !string.IsNullOrEmpty(PurchaseRequisitionRecord.Rejectreason))
                {
                    if(PurchaseRequisitionRecord.approvalstatus==EApprovalStatus.Rejected)
                    {
                        <div class="form-group mt-3">
                            <label for="RejectReason" class="form-label">Reject Reason</label>
                            <InputText id="RejectReason"
                            @bind-Value="PurchaseRequisitionRecord.Rejectreason"
                            class="form-control" readonly />
                        </div>
                    }

                }

                @if (bCanOpenPO)
                {
                    @if (bIsProcurementManager)
                    {
                        <button @onclick="OnPrintPDF" class="btn btn-primary btn-lg">
                            View PO
                        </button>
                    }

                }

                @if (bIsDepartmentMatchApproval && bHaventApproveOrReject)
                {
                    <button @onclick="OnApprove" class="btn btn-primary btn-lg">
                        Approve
                    </button>
                    <button @onclick="OnReject" class="btn btn-primary btn-lg">
                        Reject
                    </button>
                    <div class="form-group mt-3">
                        <label for="RejectReason" class="form-label">Reject Reason</label>
                        <InputText id="RejectReason"
                        @bind-Value="PurchaseRequisitionRecord.Rejectreason"
                        class="form-control" />
                    </div>
                }


            </div>
            <textarea readonly rows="6" cols="60">@EmailSendStatus</textarea>
        </EditForm>


    </div>
</div>


@code {
    private Guid inputFileKey = Guid.NewGuid();
    [Parameter] public string RequisitionNumber { get; set; }

    [SupplyParameterFromForm]
    private PurchaseRequisitionRecord PurchaseRequisitionRecord { get; set; } = new();
    [Inject] IJSRuntime JS { get; set; }
    private bool bNewRequisition = false;
    private bool bCanOpenPO;
    private bool bHaventApproveOrReject;
    private string EmailSendStatus;

    private bool bCanEditApproval;
    private bool bIsProcurementManager;

    private bool bIsDepartmentMatchApproval;
    UserName? MyUser;
    public class CurrencyItem
    {
        public string Text { get; set; } = string.Empty;  // "US Dollar (USD)"
        public string Value { get; set; } = string.Empty; // "USD"
    }

    private List<CurrencyItem> CurrencyList = CultureInfo
        .GetCultures(CultureTypes.AllCultures)
        .Select(c =>
        {
            try
            {
                var region = new RegionInfo(c.Name);
                return new CurrencyItem
                    {
                        Text = $"{region.CurrencyEnglishName} ({region.ISOCurrencySymbol})",
                        Value = region.ISOCurrencySymbol
                    };
            }
            catch
            {
                return null;
            }
        })
        .Where(x => x != null)
        .GroupBy(x => x.Value)  // remove duplicates
        .Select(g => g.First())
        .OrderBy(x => x.Text)
        .ToList();
    private List<CurrencyItem> filteredCurrencyList;



    private async Task SendEmail(List<string> mainEmailList, List<string> ccList)
    {
        if (mainEmailList == null || !mainEmailList.Any(e => !string.IsNullOrWhiteSpace(e)))
        {
            EmailSendStatus = "⚠️ No main recipients, email not sent.";
            Console.WriteLine(EmailSendStatus);
            return;
        }

        // Convert lists to comma-separated strings for debugging
        string mainEmails = string.Join(", ", mainEmailList);
        string ccEmails = string.Join(", ", ccList);

        // Print to browser console for debug
        await JS.InvokeVoidAsync("console.log", $"Main Emails: {mainEmails}");
        await JS.InvokeVoidAsync("console.log", $"CC Emails: {ccEmails}");
        var encodedReturnUrl = Uri.EscapeDataString(
            $"purchaserequisitionrecords_client/create/{PurchaseRequisitionRecord.RequisitionNumber}");

        var requisitionUrl = $"{NavigationManager.BaseUri}authentication/login?returnUrl={encodedReturnUrl}";

        // Create request object for controller
        var emailRequest = new EmailRequest
            {
                To = mainEmailList,
                Cc = ccList,
                Subject = $"Approval Needed: Purchase Requisition #{PurchaseRequisitionRecord.RequisitionNumber}",
                Body = $@"
            <html>
                <body style='font-family:Segoe UI, Arial, sans-serif; color:#333; font-size:14px;'>
                    <p>Hello,</p>
                    <p>A new purchase requisition (<strong>{PurchaseRequisitionRecord.RequisitionNumber}</strong>) requires your review and approval.</p>
                    <p style='margin:20px 0;'>
                        <a href='{requisitionUrl}'
                           style='background-color:#007bff; color:#ffffff; padding:10px 20px;
                                  text-decoration:none; border-radius:5px; display:inline-block;'>
                            Approve Requisition
                        </a>
                    </p>
                    <p>If the button above doesn't work, you can copy and paste this link into your browser:</p>
                    <p><a href='{requisitionUrl}'>{requisitionUrl}</a></p>
                    <p>Thank you,<br/>Procurement Team</p>
                </body>
            </html>",
                IsHtml = true
            };

        try
        {
            var response = await Http.PostAsJsonAsync("api/email/send", emailRequest);

            if (response.IsSuccessStatusCode)
            {
                var toList = string.Join(", ", mainEmailList.Where(e => !string.IsNullOrWhiteSpace(e)));
                var ccListStr = string.Join(", ", ccList.Where(e => !string.IsNullOrWhiteSpace(e)));

                EmailSendStatus = $"✅ Email sent successfully!\nTo: {toList}\nCc: {ccListStr}";
                Console.WriteLine("✅ Email sent successfully!");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ Failed to send email: {response.StatusCode} - {error}");
                EmailSendStatus = $"❌ Failed to send email: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Exception sending email: {ex.Message}");
            EmailSendStatus = $"❌ Exception: {ex.Message}";
        }
    }

    private async Task SetUserName()
    {
        string userKey = await JS.InvokeAsync<string>("getCookie", "userKey");

        await JS.InvokeVoidAsync("console.log", $"SetUserName{userKey}");
        MyUser = System.Text.Json.JsonSerializer.Deserialize<UserName>(userKey);

    }

    private async Task<object[]> GetAllNeededForMainEmails()
    {
        var MainEmailList = await GetAllNeededForApprovalEmails();
        var Recipients = MainEmailList?
           .Select(email => new
           {
               emailAddress = new { address = email }
           })
           .ToArray();
        return Recipients;
    }


    private async Task<List<string>> GetProcurementEmail()
    {
        var FindEmailResponse = await Http.PostAsJsonAsync(
        NavigationManager.ToAbsoluteUri("api/login/getrolemail"),
          new List<EDepartment> { EDepartment.ProcurementManager });

        List<string> emailList = new List<string>();

        if (FindEmailResponse.IsSuccessStatusCode)
        {
            emailList = await FindEmailResponse.Content.ReadFromJsonAsync<List<string>>();


        }

        return emailList;
    }

    private async Task OnSendEmailToRelevantParty()
    {
        // refresh status before send
        PurchaseRequisitionRecord.OnApprovalChanged();

        List<string> CCEmail = new List<string>();
        List<string> MainEmail = new List<string>();
        string currentEmail;

        switch (PurchaseRequisitionRecord.approvalstatus)
        {
            case (EApprovalStatus.PreApproval):
                await JS.InvokeVoidAsync("console.log", "Status: PreApproval");

                MainEmail = await GetProcurementEmail();
                currentEmail = await GetCurrentEmail();
                if (!string.IsNullOrWhiteSpace(currentEmail))
                {
                    CCEmail.Add(currentEmail);
                }
                break;

            case (EApprovalStatus.PendingApproval):
                await JS.InvokeVoidAsync("console.log", "Status: PendingApproval");

                MainEmail = await GetAllNeededForApprovalEmails();
                CCEmail = await GetProcurementEmail();
                break;

            case (EApprovalStatus.Approved):
                await JS.InvokeVoidAsync("console.log", "Status: Approved");

                MainEmail = await GetProcurementEmail();
                currentEmail = await GetCurrentEmail();
                if (!string.IsNullOrWhiteSpace(currentEmail))
                {
                    CCEmail.Add(currentEmail);
                }
                break;

            case (EApprovalStatus.Rejected):
                await JS.InvokeVoidAsync("console.log", "Status: Rejected");

                MainEmail = await GetProcurementEmail();
                currentEmail = await GetCurrentEmail();
                if (!string.IsNullOrWhiteSpace(currentEmail))
                {
                    CCEmail.Add(currentEmail);
                }
                break;
        }

        await SendEmail(MainEmail, CCEmail);
    }


    private async Task<List<string>> GetAllNeededForApprovalEmails()
    {
        List<string> Email = new List<string>();
        if (PurchaseRequisitionRecord==null)
        {
            return Email;
        }
        HashSet<EDepartment> Departments=PurchaseRequisitionRecord.GetSelectedDepartments();
        var FindEmailResponse = await Http.PostAsJsonAsync(
    NavigationManager.ToAbsoluteUri("api/login/getrolemail"),
      Departments.ToList());
        List<string> emailList = new List<string>();

        if (FindEmailResponse.IsSuccessStatusCode)
        {
            emailList = await FindEmailResponse.Content.ReadFromJsonAsync<List<string>>();


        }
        return emailList;
    }

    private async Task<UserName?> GetCurrentUser()
    {
        UserName restoredUser = new UserName();
        var json = await JS.InvokeAsync<string>("getCookie", "userKey");
        if (!string.IsNullOrWhiteSpace(json))
        {
            try
            {
                restoredUser = System.Text.Json.JsonSerializer.Deserialize<UserName>(json);

            }
            catch (Exception Ex)
            {

            }
        }
        return restoredUser;
    }



    private async Task<string?> GetCurrentEmail()
    {
        UserName restoredUser = await GetCurrentUser();

        return restoredUser.Email;
    }


    private async Task<EDepartment> GetCurrentDepartmentRole()
    {
        EDepartment role = EDepartment.NotSpecified;
        var json = await JS.InvokeAsync<string>("getCookie", "userKey");
        if (!string.IsNullOrWhiteSpace(json))
        {
            try
            {
                UserName restoredUser = System.Text.Json.JsonSerializer.Deserialize<UserName>(json);
                if (restoredUser != null)
                {
                    role = restoredUser.Role;
                }
            }
            catch(Exception Ex)
            {

            }
        }
        return role;
    }

    private async Task AddPurchaseRequisitionRecord()
    {
        PurchaseRequisitionRecord.OnApprovalChanged();

        PurchaseRequisitionRecord.OnUpdatePRStatus();

        if (PurchaseRequisitionRecord==null)
        {

            await JS.InvokeVoidAsync("alert", "null PurchaseRequisitionRecord!");
        }
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            string email = user.FindFirst(c => c.Type == "preferred_username" || c.Type == "email")?.Value;

            PurchaseRequisitionRecord.Requestor = email ?? "Unknown";
        }
        if(PurchaseRequisitionRecord.approvalstatus==EApprovalStatus.Creation)
        {
            PurchaseRequisitionRecord.approvalstatus = EApprovalStatus.PreApproval;
        }
      
        PurchaseRequisitionRecord.UpdateDate = DateTime.Now;
        var response = await Http.PostAsJsonAsync(
            NavigationManager.ToAbsoluteUri("api/pr/submit"),
            new List<PurchaseRequisitionRecord> { PurchaseRequisitionRecord });

        if (response.IsSuccessStatusCode)
        {
            var PR_Ids = await response.Content.ReadFromJsonAsync<List<string>>();
            if(PR_Ids.Count>0)
            {
                PurchaseRequisitionRecord.RequisitionNumber=PR_Ids[0];
            }
            await OnSendEmailToRelevantParty();
            await SubmitQuotation();
            StateStorage.Remove("PR");

            await JS.InvokeVoidAsync("alert", "Purchase Requisition submitted successfully!");
        }
        else
        {
            string errorDetails = await response.Content.ReadAsStringAsync();
            string message = $"Submission failed. Status Code: {(int)response.StatusCode} - {response.ReasonPhrase}\nDetails: {errorDetails}";

            await JS.InvokeVoidAsync("alert", message);
        }


        StateHasChanged();
    }

    private bool IsSubmitted()
    {
        if (!string.IsNullOrEmpty(RequisitionNumber))
        {
            return true;
        }
        return false;
    }


    protected override async Task OnInitializedAsync()
    {
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();
        filteredCurrencyList = CurrencyList;
        EDepartment MyDepartment = await GetCurrentDepartmentRole();
        bIsProcurementManager = (MyDepartment == EDepartment.ProcurementManager);

        if (!string.IsNullOrEmpty(RequisitionNumber))
        {
            bNewRequisition = false;
            var FoundPRRecord = StateStorage.Get<PurchaseRequisitionRecord>("PR");
            if (FoundPRRecord!=null&&FoundPRRecord.RequisitionNumber == RequisitionNumber)
            {
                PurchaseRequisitionRecord = FoundPRRecord;
            }
            else
            {
                var response = await Http.PostAsJsonAsync(
                NavigationManager.ToAbsoluteUri("api/pr/get-detail"), new List<string> { RequisitionNumber });
                if (response.IsSuccessStatusCode)
                {
                    try
                    {
                        var Lists = await response.Content.ReadFromJsonAsync<List<PurchaseRequisitionRecord>>();
                        if(Lists.Count>0)
                        {
                            PurchaseRequisitionRecord = Lists[0];
                        }

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error deserializing response: {ex.Message}");

                    }
                }
            }
            if(PurchaseRequisitionRecord!=null)
            {
                foreach (var approval in PurchaseRequisitionRecord.Approvals)
                {
                    if(approval.Departments.Contains(MyDepartment))
                    {
                        bIsDepartmentMatchApproval = true;
                    }
                }
            }

        }
        // if new create
        else
        {
            PurchaseRequisitionRecord FindRecord;
            bool bFound=StateStorage.TryGet<PurchaseRequisitionRecord>("PR", out FindRecord);
            if(bFound)
            {
                PurchaseRequisitionRecord = FindRecord;

            }
            bNewRequisition = true;
            await SetUserName();
            PurchaseRequisitionRecord.Department = MyUser.Department;
        }
        if (PurchaseRequisitionRecord.approvalstatus == EApprovalStatus.Rejected || PurchaseRequisitionRecord.approvalstatus == EApprovalStatus.Approved)
        {
            bHaventApproveOrReject = false;
        }
        else
        {
            bHaventApproveOrReject = true;
        }

        bCanOpenPO = (PurchaseRequisitionRecord.prstatus == EPRStatus.ApprovedRequests);
        stopwatch.Stop();
        Console.WriteLine($"OnInitializedAsync took {stopwatch.ElapsedMilliseconds} ms");

        UpdatebCanEditApproval();
    }


    private async Task SubmitQuotation()
    {
        QuotationRecord Quotation;

        StateStorage.TryGet<QuotationRecord>("Quotation", out Quotation);
        if (Quotation != null)
        {
            await JS.InvokeVoidAsync("console.group", $"{Quotation.SupportDocuments.Count}, Submitting Quotation");
            Quotation.pr_id = PurchaseRequisitionRecord.RequisitionNumber;
        }
        else
        {
            return;
        }


        await JS.InvokeVoidAsync("console.log", "Preparing submission...");

        try
        {
            var response = await Http.PostAsJsonAsync(
                NavigationManager.ToAbsoluteUri("api/quotation/submit"),
                new List<QuotationRecord> { Quotation });

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("console.log", "✅ Submission successful!");
                await JS.InvokeVoidAsync("alert", "Submission successful!");
            }
            else
            {
                string errorDetails = await response.Content.ReadAsStringAsync();
                string message = $"Submission failed. Status Code: {(int)response.StatusCode} - {response.ReasonPhrase}\nDetails: {errorDetails}";

                await JS.InvokeVoidAsync("console.error", message);
                await JS.InvokeVoidAsync("alert", message);
            }
        }
        catch (HttpRequestException ex)
        {
            await JS.InvokeVoidAsync("console.error", $"🌐 Network error while submitting quotation: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Network error: {ex.Message}");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"🔥 Unexpected error while submitting quotation: {ex}");
            await JS.InvokeVoidAsync("alert", "Unexpected error occurred. Check console for details.");
        }
        finally
        {
            await JS.InvokeVoidAsync("console.groupEnd");
        }
    }


    private void UpdatebCanEditApproval()
    {
        if(PurchaseRequisitionRecord==null)
        {
            bCanEditApproval = false;
            return;
        }
        foreach(var Approval in PurchaseRequisitionRecord.Approvals)
        {
            if(Approval.ApproveStatus!=ESingleApprovalStatus.PendingAction)
            {
                bCanEditApproval = false;
                return;
            }
        }
        if(PurchaseRequisitionRecord.approvalstatus==EApprovalStatus.PreApproval)
        {
            bCanEditApproval = true;
        }

    }

    private async void OnApprove()
    {
        EDepartment MyDepartment = await GetCurrentDepartmentRole();
        foreach (var approval in PurchaseRequisitionRecord.Approvals)
        {
            if (approval.Departments.Contains(MyDepartment))
            {
                approval.ApproveStatus = ESingleApprovalStatus.Approved;
                UserName MyUser = await GetCurrentUser();
                await JS.InvokeVoidAsync("console.log", $"OnApprove: {MyUser.Name}");
                approval.UserName = MyUser.Name;
            }
        }
        PurchaseRequisitionRecord.OnUpdatePRStatus();
        PurchaseRequisitionRecord.OnApprovalChanged();
        await AddPurchaseRequisitionRecord();
    }

    private async void OnReject()
    {
        EDepartment MyDepartment = await GetCurrentDepartmentRole();
        foreach (var approval in PurchaseRequisitionRecord.Approvals)
        {
            if (approval.Departments.Contains(MyDepartment))
            {
                approval.ApproveStatus = ESingleApprovalStatus.Rejected;
                UserName MyUser = await GetCurrentUser();
                await JS.InvokeVoidAsync("console.log", $"OnApprove: {MyUser.Name}");
                approval.UserName = MyUser.Name;
            }
        }
        PurchaseRequisitionRecord.OnUpdatePRStatus();
        PurchaseRequisitionRecord.OnApprovalChanged();
        bHaventApproveOrReject = false;
        await AddPurchaseRequisitionRecord();
        StateHasChanged();
    }

    private Task OnInputChange(ChangeEventArgs args, ApprovalInfo approval)
    {
        bool isChecked = (bool)args.Value;

        if (isChecked)
            approval.UserName = GlobalVar?.UserName.Name ?? "";
        else
            approval.UserName = "";

        return Task.CompletedTask;
    }

    private Task OnCheckboxChanged((bool NewValue, ApprovalInfo Approval) args)
    {
        PurchaseRequisitionRecord.OnApprovalChanged();
        return Task.CompletedTask;
    }

    private Task AddItem(MouseEventArgs args)
    {
        RequestItemInfo ItemInfo = new RequestItemInfo();
        PurchaseRequisitionRecord.ItemRequested.Add(ItemInfo);
        return Task.CompletedTask;
    }

    private Task RemoveItem(int i)
    {
        PurchaseRequisitionRecord.ItemRequested.RemoveAt(i);
        return Task.CompletedTask;
    }
    private void OnPrintPDF()
    {
        if (!IsSubmitted())
        {
            StateStorage.Set("PR", PurchaseRequisitionRecord);
        }
        NavigationManager.NavigateTo($"/purchaseorder_client/print/{PurchaseRequisitionRecord.RequisitionNumber}");

    }
    private void OnQuotation()
    {
        if(!IsSubmitted())
        {
            StateStorage.Set("PR", PurchaseRequisitionRecord);
        }
       
        if (string.IsNullOrEmpty(PurchaseRequisitionRecord.RequisitionNumber))
        {
            NavigationManager.NavigateTo($"/Quotation_Client");
        }
        else
        {
            NavigationManager.NavigateTo($"/Quotation_Client/{PurchaseRequisitionRecord.RequisitionNumber}");
        }
        //
    }

    
    private void SaveAsDraft()
    {
        StateStorage.Set("PR", PurchaseRequisitionRecord);

    }
    /*
    private void LoadDraft()
    {
        bool bTrue=StateStorage.TryGet<PurchaseRequisitionRecord>("PR_Draft", out PurchaseRequisitionRecord Found);
        if(bTrue)
        {
            PurchaseRequisitionRecord = Found;
        }
    }
    */
}