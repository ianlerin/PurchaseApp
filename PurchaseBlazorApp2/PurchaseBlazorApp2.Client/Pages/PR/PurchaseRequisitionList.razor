@page "/purchaserequisitionrecords_client/list"
@using Genesis.UserService
@using PurchaseBlazorApp2.Components.Data
@inject HttpClient Http
@using Radzen.Blazor
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@rendermode InteractiveAuto
<h3>Purchase Requisition List</h3>

<div class="container-fluid mt-4 mb-4">
    <div class="row">
        <div class="col-md-12">

            @if (IsLoading)
            {
                <div class="d-flex justify-content-center align-items-center p-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="ms-2">Loading Purchase Requisitions...</span>
                </div>
            }
            else
            {
                <div style="overflow-x:auto;">

                    <PurchaseBlazorApp2.Client.Components.Helper.EnumDropDownBox @bind-Value="FilterType"
                                                                                 TEnum="PurchaseBlazorApp2.Components.Data.EFilterPRType">
                    </PurchaseBlazorApp2.Client.Components.Helper.EnumDropDownBox>


                    <RadzenDataGrid Data="@Records"
                    TItem="PurchaseRequisitionRecord"
                    AllowSorting="true"
                    Style="min-width:1500px;"
                    Class="shadow-sm border rounded p-3">
                        <Columns>
                            <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Property="RequisitionNumber" Title="Requisition No." Width="150px" />

                            <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Property="RequestDate" Title="Date" Width="150px">
                                <Template Context="data">
                                    @data.RequestDate.ToString("dd/MM/yyyy")
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Title="Requested Item" Width="200px">
                                <Template Context="data">
                                    @(data.ItemRequested != null && data.ItemRequested.Count > 0
                                                    ? data.ItemRequested[0].RequestItem
                                                    : "-")
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Title="Urgent" Width="100px">
                                <Template Context="data">
                                    @(data.burgent ? "Yes" : "No")
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Property="approvalstatus" Title="Approval Status" Width="150px">
                                <Template Context="data">
                                    @data.approvalstatus.ToString()
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Property="prstatus" Title="PR Status" Width="150px">
                                <Template Context="data">
                                    @data.prstatus.ToString()
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Property="DeliveryDate" Title="Delivery Date" Width="150px">
                                <Template Context="data">
                                    @(data.DeliveryDate == DateTime.MinValue
                                                    ? string.Empty
                                                    : data.DeliveryDate.ToString("dd/MM/yyyy"))
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Property="paymentstatus" Title="Payment Status" Width="150px">
                                <Template Context="data">
                                    @data.paymentstatus.ToString()
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Title="Actions" Width="160px">
                                <Template Context="record">
                                    <div style="display: flex; gap: 6px;">
                                        <RadzenButton Text="View"
                                        Icon="visibility"
                                        Click="@(() => OnViewClicked(record))"
                                        Style="min-width:70px;" />
                                        @if(bProcurementOrFinance)
                                        {
                                            <RadzenButton Text="Action"
                                                          Icon="visibility"
                                                          Click="@(() => OnActionClicked(record))"
                                                          Style="min-width:70px;" />
                                        }
                                        @if(record.paymentstatus!=EPaymentStatus.PendingInvoice)
                                        {
                                                <RadzenButton Text="Finance"
                                                          Icon="visibility"
                                                          Click="@(() => OnFinanceClicked(record))"
                                                          Style="min-width:70px;" />

                                        }
                                    
                                     
                                    </div>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </div>

            }
        </div>
    </div>
</div>

@code {
    private List<PurchaseRequisitionRecord> Records = new();
    private bool IsLoading = true;
    private bool bProcurementOrFinance = false;

    private EFilterPRType _FilterType = EFilterPRType.CreatedBy;
    public EFilterPRType FilterType { get { return _FilterType; } set { _FilterType = value; OnSetFilterType(); } }

    protected override async Task OnInitializedAsync()
    {
        await ReloadList();
    }

    private void OnSetFilterType()
    {
        ReloadList();
    }

    private async Task ReloadList()
    {
        IsLoading = true; // show loading
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        try
        {
            HttpResponseMessage? response = new HttpResponseMessage();

            EDepartment MyDepartment = await GeneralLibrary.GetCurrentDepartmentRole(JS);
            if(MyDepartment == EDepartment.ProcurementManager||MyDepartment == EDepartment.Finance)
            {
                  bProcurementOrFinance = true;
            }
         
            if (bProcurementOrFinance)
            {
                response = await Http.PostAsJsonAsync(
                    NavigationManager.ToAbsoluteUri("api/pr/get-list-partial"),
                    new List<PurchaseRequisitionRecord>());
            }
            else
            {
                List<string> StringRecords = await GetRecordsToView();
                foreach (string Record in StringRecords)
                {
                    await JS.InvokeVoidAsync("console.log", $"Load Records {Record}");
                }
                if (StringRecords.Count() > 0)
                {
                    response = await Http.PostAsJsonAsync(
    NavigationManager.ToAbsoluteUri("api/pr/get-list-partial"),
    StringRecords);
                }

            }

            if (response.IsSuccessStatusCode)
            {
                try
                {
                    var records = await response.Content.ReadFromJsonAsync<List<PurchaseRequisitionRecord>>();

                    if (records is not null)
                    {
                        Records = records;
                        await JS.InvokeVoidAsync("console.log", $"✅ Loaded {records.Count} purchase requisitions");
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("console.warn", "⚠️ Received null when deserializing PurchaseRequisitionRecord list.");
                        Records = new List<PurchaseRequisitionRecord>();
                    }
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("console.error", $"❌ Error deserializing response: {ex.Message}");
                    Records = new List<PurchaseRequisitionRecord>();
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("console.error", $"HTTP error {response.StatusCode}: {error}");
                Records = new List<PurchaseRequisitionRecord>();
            }
            UserHelperService helperService = new UserHelperService(JS);
            bProcurementOrFinance = await helperService.GetIsProcurementAsync();
        }
        catch (HttpRequestException ex)
        {
            await JS.InvokeVoidAsync("console.error", $"🌐 Network error while fetching list: {ex.Message}");
            Records = new List<PurchaseRequisitionRecord>();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"🔥 Unexpected error: {ex}");
            Records = new List<PurchaseRequisitionRecord>();
        }
        finally
        {
            IsLoading = false; // hide loading
        }

        stopwatch.Stop();
        await JS.InvokeVoidAsync("console.log", $"⏱ Loaded PR list in {stopwatch.ElapsedMilliseconds} ms");
        StateHasChanged();
    }

    private async Task<List<string>> GetRecordsToView()
    {
        EDepartment MyDepartment = await GeneralLibrary.GetCurrentDepartmentRole(JS);
        List<string> MyHashSet = new List<string>();
        switch (FilterType)
        {
            case(EFilterPRType.Approval):
                var ApprovalSearch = await Http.PostAsJsonAsync(
                       NavigationManager.ToAbsoluteUri("api/pr/get-needapproval"), MyDepartment
                       );
                HashSet<string> ApprovalHashrecords = await ApprovalSearch.Content.ReadFromJsonAsync<HashSet<string>>();
                MyHashSet = ApprovalHashrecords.ToList();
                break;

            case (EFilterPRType.CreatedBy):
                UserName name=await GetCurrentUser();
                var CreatedBy = await Http.PostAsJsonAsync(
                          NavigationManager.ToAbsoluteUri("api/pr/get-createdby"), name.Email
                          );
                HashSet<string> FilterHashrecords = await CreatedBy.Content.ReadFromJsonAsync<HashSet<string>>();
                MyHashSet = FilterHashrecords.ToList();
                break;
        }
        return MyHashSet;
    }

    private async Task<UserName?> GetCurrentUser()
    {
        UserName restoredUser = new UserName();
        var json = await JS.InvokeAsync<string>("getCookie", "userKey");
        if (!string.IsNullOrWhiteSpace(json))
        {
            try
            {
                restoredUser = System.Text.Json.JsonSerializer.Deserialize<UserName>(json);

            }
            catch (Exception Ex)
            {

            }
        }
        return restoredUser;
    }

     private void OnFinanceClicked(PurchaseRequisitionRecord record)
    {
       
        NavigationManager.NavigateTo($"/finance-record/{record.po_id}");
    }

    private void OnViewClicked(PurchaseRequisitionRecord record)
    {
        NavigationManager.NavigateTo($"/purchaserequisitionrecords_client/create/{record.RequisitionNumber}");
    }
    private void OnActionClicked(PurchaseRequisitionRecord record)
    {
        NavigationManager.NavigateTo($"/pr-preapproval/{record.RequisitionNumber}");
    }
}