@page "/purchaserequisitionrecords_client/list"
@using PurchaseBlazorApp2.Components.Data
@inject HttpClient Http
@using Radzen.Blazor
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@rendermode InteractiveAuto
<h3>Purchase Requisition List</h3>

<div class="container mt-4 mb-4">
    <div class="row">
        <div class="col-md-12">

            @if (IsLoading)
            {
                <div class="d-flex justify-content-center align-items-center p-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="ms-2">Loading Purchase Requisitions...</span>
                </div>
            }
            else
            {
                <RadzenDataGrid Data="@Records" TItem="PurchaseRequisitionRecord" AllowSorting="true"
                Class="shadow-sm border rounded p-3">
                    <Columns>
                        <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Property="RequisitionNumber" Title="Requisition No." />

                        <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Property="RequestDate" Title="Request Date">
                            <Template Context="data">
                                @data.RequestDate.ToString("dd/MM/yyyy")
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Property="DeliveryDate" Title="Delivery Date">
                            <Template Context="data">
                                @(data.DeliveryDate == DateTime.MinValue
                                            ? string.Empty
                                            : data.DeliveryDate.ToString("dd/MM/yyyy"))
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Property="prstatus" Title="PR Status">
                            <Template Context="data">
                                @data.prstatus.ToString()
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Property="approvalstatus" Title="Approval Status">
                            <Template Context="data">
                                @data.approvalstatus.ToString()
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Title="Requested Item">
                            <Template Context="data">
                                @(data.ItemRequested != null && data.ItemRequested.Count > 0
                                            ? data.ItemRequested[0].RequestItem
                                            : "-")
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Title="Urgent">
                            <Template Context="data">
                                @(data.burgent ? "Yes" : "No")
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="PurchaseRequisitionRecord" Title="Actions">
                            <Template Context="record">
                                <RadzenButton Text="View" Icon="visibility"
                                Click="@(() => OnViewClicked(record))" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
        </div>
    </div>
</div>

@code {
    private List<PurchaseRequisitionRecord> Records = new();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true; // show loading
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        try
        {
            HttpResponseMessage? response = new HttpResponseMessage();

            EDepartment MyDepartment = await GeneralLibrary.GetCurrentDepartmentRole(JS);

            bool bIsProcurement = MyDepartment == EDepartment.ProcurementManager;
            if (bIsProcurement)
            {
                response = await Http.PostAsJsonAsync(
                    NavigationManager.ToAbsoluteUri("api/pr/get-list-partial"),
                    new List<PurchaseRequisitionRecord>());
            }
            else
            {
                var ListToRetrieveResponse = await Http.PostAsJsonAsync(
                    NavigationManager.ToAbsoluteUri("api/pr/get-needapproval"), MyDepartment
                    );
                HashSet<string> Hashrecords = await ListToRetrieveResponse.Content.ReadFromJsonAsync<HashSet<string>>();
                List<string> StringRecords = Hashrecords.ToList();
                foreach(string Record in StringRecords)
                {
                    await JS.InvokeVoidAsync("console.log", $"Load Records {Record}");
                }

                response = await Http.PostAsJsonAsync(
                    NavigationManager.ToAbsoluteUri("api/pr/get-list-partial"),
                    StringRecords);
            }

            if (response.IsSuccessStatusCode)
            {
                try
                {
                    var records = await response.Content.ReadFromJsonAsync<List<PurchaseRequisitionRecord>>();

                    if (records is not null)
                    {
                        Records = records;
                        await JS.InvokeVoidAsync("console.log", $"✅ Loaded {records.Count} purchase requisitions");
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("console.warn", "⚠️ Received null when deserializing PurchaseRequisitionRecord list.");
                        Records = new List<PurchaseRequisitionRecord>();
                    }
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("console.error", $"❌ Error deserializing response: {ex.Message}");
                    Records = new List<PurchaseRequisitionRecord>();
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("console.error", $"HTTP error {response.StatusCode}: {error}");
                Records = new List<PurchaseRequisitionRecord>();
            }
        }
        catch (HttpRequestException ex)
        {
            await JS.InvokeVoidAsync("console.error", $"🌐 Network error while fetching list: {ex.Message}");
            Records = new List<PurchaseRequisitionRecord>();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"🔥 Unexpected error: {ex}");
            Records = new List<PurchaseRequisitionRecord>();
        }
        finally
        {
            IsLoading = false; // hide loading
        }

        stopwatch.Stop();
        await JS.InvokeVoidAsync("console.log", $"⏱ Loaded PR list in {stopwatch.ElapsedMilliseconds} ms");
        StateHasChanged();
    }

    private void OnViewClicked(PurchaseRequisitionRecord record)
    {
        NavigationManager.NavigateTo($"/purchaserequisitionrecords_client/create/{record.RequisitionNumber}");
    }
}