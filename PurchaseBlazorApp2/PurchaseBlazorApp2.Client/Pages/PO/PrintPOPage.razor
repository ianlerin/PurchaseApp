@page "/purchaseorder_client/print/{RequisitionNumber}"
@inject IJSRuntime JS
@inject ClientStateStorage StateStorage
@inject ClientGlobalVar GlobalVar
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using PurchaseBlazorApp2.Components.Data
@using PurchaseBlazorApp2.Components.Global

@if (PRRecord is not null)
{
    <h3>Purchase Requisition Form</h3>

    <div id="requisition-form" style="font-family: Arial; padding: 20px; max-width: 800px;">
        <h4>LCDA MSB PINEAPPLE SDN BHD</h4>
        <p>
            166, Kampung Kovil, Lot 931 Mk17, 14000 Bukit Mertajam, Penang, Malaysia. <br />
            Email: lcdamsbpineapple@gmail.com, nitsei1@hotmail.com <br />
            Tel: 604-5308419 / 5370081
        </p>

        <hr />

        <h5>Requester Information</h5>
        <div>
            <label>Requisition Number:</label>
            <input class="form-control" @bind="PRRecord.RequisitionNumber" readonly />

            <label>Requisition Date:</label>
            <input class="form-control" type="date" @bind="PRRecord.RequestDate" readonly />

            <label>Requested By:</label>
            <input class="form-control" @bind="PRRecord.Requestor" readonly />

            <label>Department:</label>
            <input class="form-control" @bind="PRRecord.Department" readonly />
        </div>

        <hr />

        <h5>Item(s) Requested</h5>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>No.</th>
                    <th>Description of Goods/Services</th>
                    <th>Quantity</th>
                    <th>Unit Price (RM)</th>
                    <th>Total Price (RM)</th>
                </tr>
            </thead>
            <tbody>
                @if (PRRecord.ItemRequested is not null)
                {
                    @foreach (var Item in PRRecord.ItemRequested)
                    {
                        <tr>
                            <td><input class="form-control" @bind="Item.RequestItem" readonly /></td>
                            <td><input type="number" class="form-control" @bind="Item.Quantity" readonly /></td>
                            <td><input type="number" class="form-control" @bind="Item.UnitPrice" readonly /></td>
                            <td>@(Item?.Quantity * Item?.UnitPrice ?? 0)</td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <div class="mb-3">
            <label>Subtotal:</label> @(Subtotal) RM <br />
            <label>Tax (6%):</label> @(Tax) RM <br />
            <label><b>Total:</b></label> <b>@(Total) RM</b>
        </div>

        <div class="mb-3">
            <label>Purpose/Justification:</label>
            <textarea class="form-control" @bind="PRRecord.Purpose" readonly></textarea>
        </div>
    </div>
}

@if (purchaseOrderRecord is not null)
{
    <h5>To be Filled By Purchasing Department</h5>
    <div>
        <label>Purchase Order:</label>
        <InputText class="form-control" @bind-Value="purchaseOrderRecord.PO_ID" />

        <label>Date:</label>
        <InputDate class="form-control" @bind-Value="purchaseOrderRecord.Date" />

        <div class="d-flex align-items-center gap-3 mb-2">
            <PurchaseBlazorApp2.Client.Components.Helper.ApprovalArea Approvals="purchaseOrderRecord.ApprovalInfo"
                                                                      MyGlobalVar="GlobalVar"
                                                                      OnApprovalChanged="OnCheckboxChanged" />
        </div>
    </div>
}

<hr />
<button class="btn btn-primary" @onclick="ExportToPdf">Export to PDF</button>
<button class="btn btn-primary" @onclick="CreateandSubmit">Create and Submit</button>
<button class="btn btn-primary" @onclick="GoToPR">Examine PR</button>
@code {

    [Parameter] public string? RequisitionNumber { get; set; }
    private PurchaseOrderRecord purchaseOrderRecord { get; set; } = new PurchaseOrderRecord();
    private PurchaseRequisitionRecord PRRecord { get; set; } = new PurchaseRequisitionRecord();
    protected override async Task OnInitializedAsync()
    {
        purchaseOrderRecord = StateStorage.Get<PurchaseOrderRecord>("PO");
        PRRecord = StateStorage.Get<PurchaseRequisitionRecord>("PR");

        if(purchaseOrderRecord!=null)
        {
            var response = await Http.PostAsJsonAsync(
               NavigationManager.ToAbsoluteUri("api/pr/get-detail"), new List<string> { RequisitionNumber });
            if (response.IsSuccessStatusCode)
            {
                try
                {
                    var Lists = await response.Content.ReadFromJsonAsync<List<PurchaseRequisitionRecord>>();
                    if (Lists.Count > 0)
                    {
                        PRRecord = Lists[0];
                    }

                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deserializing response: {ex.Message}");

                }
            }
        }

        if(purchaseOrderRecord==null&&PRRecord!=null)
        {
            purchaseOrderRecord = new PurchaseOrderRecord();
            purchaseOrderRecord.PR_ID = PRRecord.RequisitionNumber;

        }
    }

    private decimal Subtotal => PRRecord.ItemRequested.Sum(i => i.Quantity * i.UnitPrice);
    private decimal Tax => Subtotal * 0.06m;
    private decimal Total => Subtotal + Tax;

    private async Task ExportToPdf()
    {
        await JS.InvokeVoidAsync("printSection", "requisition-form");
    }
    private Task OnCheckboxChanged((bool NewValue, ApprovalInfo Approval) args)
    {
        purchaseOrderRecord.OnApprovalChanged();
        return Task.CompletedTask;
    }
    public class RequisitionItem
    {
        public string Description { get; set; } = "";
        public int Quantity { get; set; } = 0;
        public decimal UnitPrice { get; set; } = 0;
    }
    private async void CreateandSubmit(MouseEventArgs args)
    {

        var response = await Http.PostAsJsonAsync(
            NavigationManager.ToAbsoluteUri("api/po/submit"), new List<string>());
        if (response.IsSuccessStatusCode)
        {
            try
            {
                var TupleResponse = await response.Content.ReadFromJsonAsync<(bool bSuccess, List<string> IDs)>();
                if (TupleResponse.bSuccess)
                {
                    purchaseOrderRecord.PO_ID = TupleResponse.IDs[0];
                    await InvokeAsync(StateHasChanged);
                    await JS.InvokeVoidAsync("alert", "Submission successful!");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deserializing response: {ex.Message}");

            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Submission failed!");
        }
    }
    private void GoToPR(MouseEventArgs args)
    {
        StateStorage.Remove("PO");
        NavigationManager.NavigateTo($"/purchaserequisitionrecords_client/create/{purchaseOrderRecord.PR_ID}");
    }
}