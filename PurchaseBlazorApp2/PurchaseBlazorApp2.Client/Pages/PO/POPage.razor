@page "/purchaseorder"
@page "/purchaseorder_client/print/{RequisitionNumber}"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using PurchaseBlazorApp2.Components.Data
@using QuestPDF.Fluent;
@using QuestPDF.Helpers
@using Radzen
@using Radzen.Blazor
@using QuestPDF.Infrastructure;
@using PurchaseBlazorApp2.Components.Global
@using SharedDataType

<h3>Create Purchase Order</h3>

@inject NavigationManager NavigationManager
@inject ClientStateStorage StateStorage
@inject HttpClient Http
@inject IJSRuntime JS

<EditForm Model="Record" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />

    <h5>Purchase Order Info</h5>
    <div class="mb-3">
        <label for="poid" class="form-label">PO ID</label>
        <InputText id="poid" class="form-control" @bind-Value="Record.PO_ID" readonly/>
    </div>

    <div class="mb-3">
        <label for="prid" class="form-label">PR ID</label>
        <InputText id="prid" class="form-control" @bind-Value="Record.PR_ID" />
    </div>

    <div class="mb-3">
        <label for="createdby" class="form-label">Created By</label>
        <InputText id="createdby" class="form-control" @bind-Value="Record.CreatedBy" />
    </div>

    <h5>Company Info</h5>

    <div class="mb-3">
        <label for="companyname" class="form-label">Company Name</label>
        <InputText id="companyname" class="form-control" @bind-Value="Record.mycompanyname" />
    </div>

    <div class="mb-3">
        <label for="address" class="form-label">Address</label>
        <InputText id="address" class="form-control" @bind-Value="Record.myaddress" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email"  class="form-control" @bind-Value="Record.myemail" />
    </div>

    <div class="mb-3">
        <label for="tel" class="form-label">Telephone</label>
        <InputText id="tel" class="form-control" @bind-Value="Record.tel" />
    </div>


    <h5>Supplier Lookup</h5>
    <div class="input-group mb-3">
        <RadzenDropDown @bind-Value="SearchSID"
                        Data="@FoundSupplierLookupInfos"
                        TextProperty="DisplayName"
                        ValueProperty="ID"
                        AllowFiltering="true"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Placeholder="Select supplier"
                        Style="width:100%"
                        TValue="string" />
        <button type="button" class="btn btn-outline-primary" @onclick="SearchSupplier">Find Supplier</button>
    </div>


    <h5>Supplier Info</h5>
    <div class="mb-3">
        <label for="suppliercompany" class="form-label">Company</label>
        <InputText id="suppliercompany" class="form-control" @bind-Value="Record.suppliercompanyname" />
    </div>
    <div class="mb-3">
        <label for="supplierperson" class="form-label">Contact Person</label>
        <InputText id="supplierperson" class="form-control" @bind-Value="Record.suppliercontactperson" />
    </div>
    <div class="mb-3">
        <label for="suppliercontact" class="form-label">Contact</label>
        <InputText id="suppliercontact" class="form-control" @bind-Value="Record.suppliercontact" />
    </div>
    <div class="mb-3">
        <label for="supplieremail" class="form-label">Email</label>
        <InputText id="supplieremail" type="email" class="form-control" @bind-Value="Record.supplieremail" />
    </div>

    <h5>Ship To</h5>
    <div class="mb-3">
        <label for="shipcompany" class="form-label">Ship To Company</label>
        <InputText id="shipcompany" class="form-control" @bind-Value="Record.shiptocompanyname" />
    </div>
    <div class="mb-3">
        <label for="warehouseaddress" class="form-label">Warehouse Address</label>
        <InputText id="warehouseaddress" class="form-control" @bind-Value="Record.warehouseaddress" />
    </div>
    <div class="mb-3">
        <label for="receivingperson" class="form-label">Receiving Person</label>
        <InputText id="receivingperson" class="form-control" @bind-Value="Record.receivingperson" />
    </div>
    <div class="mb-3">
        <label for="shippingcontact" class="form-label">Shipping Contact</label>
        <InputText id="shippingcontact" class="form-control" @bind-Value="Record.shippingcontact" />
    </div>


    <h5>Additional Info</h5>
    <label for="remark" class="form-label">Remark</label>
    <InputText id="remark" class="form-control" @bind-Value="Record.remark" />

    <h5>Financial</h5>
    <div class="mb-3">
        <label for="subtotal" class="form-label">SubTotal</label>
        <InputNumber id="subtotal" class="form-control" @bind-Value="Record.SubTotal" readonly/>
    </div>
    <div class="mb-3">
        <label for="tax" class="form-label">Tax (%)</label>
        <InputNumber id="tax" class="form-control" @bind-Value="Record.Tax" />
    </div>
    <div class="mb-3">
        <label>Total</label>
        <span class="ms-2 fw-bold">@Record.GetTotal()</span>
    </div>

    <h5>Delivery</h5>
    <div class="mb-3">
        <label for="deliverydate" class="form-label">Delivery Date</label>
        <InputDate id="deliverydate" class="form-control" @bind-Value="Record.DeliveryDate" />
    </div>
    <div class="mb-3">
        <label for="deliverymethod" class="form-label">Delivery Method</label>
        <InputText id="deliverymethod" class="form-control" @bind-Value="Record.DeliveryMethod" />
    </div>
    <div class="mb-3">
        <label for="paymentmethod" class="form-label">Payment Method</label>
        <InputText id="paymentmethod" class="form-control" @bind-Value="Record.PaymentMethod" />
    </div>

    <h5>Receive Info</h5>
    <PurchaseBlazorApp2.Client.Components.Helper.EnumDropDownBox @bind-Value="Record.POStatus"
    TEnum="PurchaseBlazorApp2.Components.Data.EPOStatus"
    >
    </PurchaseBlazorApp2.Client.Components.Helper.EnumDropDownBox>

    @if (Record.POStatus == EPOStatus.GoodsReceived)
    {

        <label for="ReceiveDate" class="form-label">Receive Date</label>
        <InputDate id="ReceiveDate" class="form-control" @bind-Value="Record.ReceiveInfo.ReceiveDate" />
        <UploadImageHelper UploadedImages="@Record.ReceiveInfo.SupportDocuments"
        SelectionType=UploadImageHelper.ESelectionType.None
        Orientation="UploadImageHelper.EOrientation.Vertical"
        bNewRequisition=true
        ImageHeight="500"
        ImageWidth="500" />
        <textarea readonly rows="6" cols="60">@EmailSendStatus</textarea>
    }



    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="ResetForm">Reset</button>
    <button type="button" @onclick="DownloadPdf">Download PDF</button>
</EditForm>



@code {


    public static class PdfGenerator
    {
        public static byte[] GeneratePdf(string text)
        {
            var doc = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(20);
                    page.Header().Text("My PDF").FontSize(20);
                    page.Content().Text(text);
                    page.Footer().AlignCenter().Text("Generated with QuestPDF");
                });
            });

            return doc.GeneratePdf();
        }
    }
   
    List<SupplierLookUpInfo> FoundSupplierLookupInfos = new List<SupplierLookUpInfo>();
    private PurchaseOrderRecord Record = null;
    private PurchaseRequisitionRecord PRRecord { get; set; } = new PurchaseRequisitionRecord();
    public string EmailSendStatus{ get; set; }
    private string SearchSID { get; set; } = string.Empty;
    [Parameter] public string? RequisitionNumber { get; set; }
    protected override async Task OnInitializedAsync()
    {
        //Record = StateStorage.Get<PurchaseOrderRecord>("PO");
        PRRecord = StateStorage.Get<PurchaseRequisitionRecord>("PR");

        await JS.InvokeVoidAsync("console.log", "Initial State:", new
        {
            RecordExists = Record != null,
            PRRecordExists = PRRecord != null
        });

        if (PRRecord != null)
        {
            RequisitionNumber = PRRecord.RequisitionNumber;
            await JS.InvokeVoidAsync("console.log", $"PRRecord found, RequisitionNumber = {RequisitionNumber}");
        }

        FoundSupplierLookupInfos = await Http.GetFromJsonAsync<List<SupplierLookUpInfo>>("api/supplier/getallname") ?? new();

        if (Record == null && !string.IsNullOrEmpty(RequisitionNumber))
        {
            Record = new PurchaseOrderRecord();
            Record.PR_ID = RequisitionNumber;

            await JS.InvokeVoidAsync("console.log", $"Fetching PO for RequisitionNumber={RequisitionNumber}");

            var response = await Http.PostAsJsonAsync(
                NavigationManager.ToAbsoluteUri("api/po/get_pr"), new List<string> { RequisitionNumber });

            if (response.IsSuccessStatusCode)
            {
                try
                {
                    var Lists = await response.Content.ReadFromJsonAsync<List<PurchaseOrderRecord>>();
                    await JS.InvokeVoidAsync("console.log", $"Received PO list count = {Lists?.Count}");

                    if (Lists != null && Lists.Count > 0)
                    {
                        Record = Lists[0];
                    }
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("console.error", $"Error deserializing PO: {ex.Message}");
                }
            }
        }

        if (Record != null)
        {
            await JS.InvokeVoidAsync("console.log", $"Fetching PR details for RequisitionNumber={RequisitionNumber}");
            var response = await Http.PostAsJsonAsync(
                NavigationManager.ToAbsoluteUri("api/pr/get-detail"), new List<string> { RequisitionNumber });

            if (response.IsSuccessStatusCode)
            {
                try
                {
                    var Lists = await response.Content.ReadFromJsonAsync<List<PurchaseRequisitionRecord>>();
                    await JS.InvokeVoidAsync("console.log", $"Received PR list count = {Lists?.Count}");

                    if (Lists != null && Lists.Count > 0)
                    {
                        PRRecord = Lists[0];
                    }
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("console.error", $"Error deserializing PR detail: {ex.Message}");
                }
            }
        }

        if (PRRecord != null)
        {
            decimal subtotal = PRRecord.CalculateTotal();
            Record.SubTotal = subtotal;

            await JS.InvokeVoidAsync("console.log", $"Subtotal calculated = {subtotal}");

            var json = await JS.InvokeAsync<string>("getCookie", "userKey");
            await JS.InvokeVoidAsync("console.log", "Cookie value:", json);

            if (!string.IsNullOrWhiteSpace(json))
            {
                try
                {
                    UserName restoredUser = System.Text.Json.JsonSerializer.Deserialize<UserName>(json);
                    if (restoredUser != null)
                    {
                        Record.CreatedBy = restoredUser.Name;
                        await JS.InvokeVoidAsync("console.log", $"Restored user: {restoredUser.Name}");
                    }
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("console.error", $"Error deserializing user cookie: {ex.Message}");
                }
            }
        }
        else
        {
            await JS.InvokeVoidAsync("console.error", "No PrRecord");
        }
        await JS.InvokeVoidAsync("console.log", "OnInitializedAsync finished", new
        {
            Record = Record,
            PRRecord = PRRecord
        });
    }


    private async Task SendGoodsArrivalNotification(List<string> mainEmailList, List<string> ccList)
    {
        if (mainEmailList == null || !mainEmailList.Any(e => !string.IsNullOrWhiteSpace(e)))
        {
            EmailSendStatus = "⚠️ No recipient (requestor), email not sent.";
            Console.WriteLine(EmailSendStatus);
            return;
        }

        // Convert lists to readable strings for logging/debug
        string mainEmails = string.Join(", ", mainEmailList);
        string ccEmails = string.Join(", ", ccList);

        await JS.InvokeVoidAsync("console.log", $"Main Emails: {mainEmails}");
        await JS.InvokeVoidAsync("console.log", $"CC Emails: {ccEmails}");

        // Create a return URL for the requestor to view their requisition record
        var encodedReturnUrl = Uri.EscapeDataString(
            $"purchaserequisitionrecords_client/create/{PRRecord.RequisitionNumber}");

        var requisitionUrl = $"{NavigationManager.BaseUri}authentication/login?returnUrl={encodedReturnUrl}";

        // ✅ Updated subject and message body
        var emailRequest = new EmailRequest
            {
                To = mainEmailList,
                Cc = ccList,
                Subject = $"Goods Arrived: Purchase Requisition #{PRRecord.RequisitionNumber}",
                Body = $@"
        <html>
            <body style='font-family:Segoe UI, Arial, sans-serif; color:#333; font-size:14px;'>
                <p>Good news! The items you requested in Purchase Requisition
                   <strong>{PRRecord.RequisitionNumber}</strong> have arrived.</p>
                <p>You may review the delivery details using the link below:</p>
                <p style='margin:20px 0;'>
                    <a href='{requisitionUrl}'
                       style='background-color:#28a745; color:#ffffff; padding:10px 20px;
                              text-decoration:none; border-radius:5px; display:inline-block;'>
                        View Requisition
                    </a>
                </p>
                <p>If the button above doesn't work, copy and paste this link into your browser:</p>
                <p><a href='{requisitionUrl}'>{requisitionUrl}</a></p>
                <p>Thank you,<br/>Procurement Team</p>
            </body>
        </html>",
                IsHtml = true
            };

        try
        {
            var response = await Http.PostAsJsonAsync("api/email/send", emailRequest);

            if (response.IsSuccessStatusCode)
            {
                var toList = string.Join(", ", mainEmailList.Where(e => !string.IsNullOrWhiteSpace(e)));
                var ccListStr = string.Join(", ", ccList.Where(e => !string.IsNullOrWhiteSpace(e)));

                EmailSendStatus = $"✅ Notification email sent successfully!\nTo: {toList}\nCc: {ccListStr}";
                Console.WriteLine("✅ Goods arrival email sent successfully!");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ Failed to send email: {response.StatusCode} - {error}");
                EmailSendStatus = $"❌ Failed to send email: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Exception sending email: {ex.Message}");
            EmailSendStatus = $"❌ Exception: {ex.Message}";
        }
    }


    private async Task SearchSupplier()
    {
        if (string.IsNullOrWhiteSpace(SearchSID))
        {
            await JS.InvokeVoidAsync("alert", "⚠️ Please enter a Supplier SID.");
            return;
        }

        try
        {
            var supplier = await Http.GetFromJsonAsync<SupplierRecord>($"api/supplier/get/{SearchSID}");
            if (supplier != null)
            {
                // Map SupplierRecord into PurchaseOrderRecord supplier fields
                Record.suppliercompanyname = supplier.companyname;
                Record.suppliercontactperson = supplier.contactperson;
                Record.suppliercontact = supplier.contact;
                Record.supplieremail = supplier.email;
                Record.shiptocompanyname = supplier.shiptocompanyname;
                Record.warehouseaddress = supplier.warehouseaddress;
                Record.receivingperson = supplier.receivingperson;
                Record.shippingcontact = supplier.shippingcontact;
                StateHasChanged();
                await JS.InvokeVoidAsync("alert", $"✅ Supplier '{supplier.companyname}' loaded successfully!");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "❌ No supplier found with that SID.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"🔥 Error retrieving supplier: {ex.Message}");
        }
    }

    private async Task OnNotifyGoodsReceived()
    {
        if (Record.POStatus == EPOStatus.GoodsReceived && !Record.bSentNotifiedEmail)
        {
            List<string> MainList = new List<string> { PRRecord.Requestor };
            await SendGoodsArrivalNotification(MainList, new List<string>());
        }
        Record.bSentNotifiedEmail = true;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await OnNotifyGoodsReceived();
            var payload = new List<PurchaseOrderRecord> { Record };
            var response = await Http.PostAsJsonAsync("api/po/submit", payload);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<POSubmitResponse>();

                if (result != null && result.bSuccess)
                {
                    // Update PO ID with first returned ID (or handle multiple IDs if needed)
                    if (result.IDs.Count > 0)
                    {
                        Record.PO_ID = result.IDs[0];
                    }
                    //update delivery date too
                    var DeliveryDatePayload = new DeliveryDateUpdateRequest
                        {
                            PR_ID = Record.PR_ID,
                            DeliveryDate = Record.DeliveryDate
                        };
                    await Http.PostAsJsonAsync("api/pr/edit-deliverydate", DeliveryDatePayload);
                    await JS.InvokeVoidAsync("alert", $"✅ Purchase Order saved successfully! ID: {Record.PO_ID}");
                    
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "⚠️ Failed to save Purchase Order.");
                }
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"❌ API call failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"🔥 Unexpected error: {ex.Message}");
        }
        StateHasChanged();
    }

    private void ResetForm()
    {
        Record = new PurchaseOrderRecord();
       
    }
    private async Task DownloadPdf()
    {
        var pdfBytes = await Http.GetByteArrayAsync($"api/pdf/purchase/{Record.PO_ID}");
        var base64 = Convert.ToBase64String(pdfBytes);
        await JS.InvokeVoidAsync("downloadFileFromBase64", $"PurchaseOrder-{Record.PO_ID}.pdf", base64);
    }
    
}