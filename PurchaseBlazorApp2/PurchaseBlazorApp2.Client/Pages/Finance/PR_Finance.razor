@page "/finance-record/{PO_ID}"
@using Genesis.EmailService
@using PurchaseBlazorApp2.Components.Data
@using PurchaseBlazorApp2.Client.Components.Helper
@using System.ComponentModel.DataAnnotations

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JS

<h2 class="text-xl font-semibold mb-4">Finance Record Entry - @PO_ID</h2>

@if (string.IsNullOrWhiteSpace(PO_ID))
{
    <div class="alert alert-danger">
        Invalid access — PO ID is required.
    </div>
}
else
{
    <div class="container mt-4">

    <!-- ============================= -->
    <!-- 1️⃣  PURCHASE ORDER INFO -->
    <!-- ============================= -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white fw-bold">
            Purchase Order Information
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label fw-bold">PO ID</label>
                        <input class="form-control" value="@PO_ID" readonly />
                </div>
            </div>
        </div>
    </div>

    <!-- ============================= -->
    <!-- 2️⃣  INVOICE INFO -->
    <!-- ============================= -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-info text-white fw-bold">
            Invoice Information
        </div>
        <div class="card-body">
            @if (PurchaseOrderRecord != null)
            {
                <UploadImageHelper UploadedImages="@PurchaseOrderRecord.InvoiceInfo.SupportDocuments"
                                   SelectionType="UploadImageHelper.ESelectionType.None"
                                   Orientation="UploadImageHelper.EOrientation.Vertical"
                                   bNewRequisition="false"
                                   ImageHeight="400"
                                   ImageWidth="400" />
            }
            else
            {
                <p class="text-muted">No invoice info available.</p>
            }
        </div>
    </div>

    <!-- ============================= -->
    <!-- 3️⃣  FINANCE RECORD UPDATES -->
    <!-- ============================= -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-secondary text-white fw-bold">
            Finance Record Updates
        </div>
        <div class="card-body">
            @if (FinanceRecord.FinanceRecordLists == null || FinanceRecord.FinanceRecordLists.Count == 0)
            {
                <p class="text-muted">No updates added yet.</p>
            }
            else
            {
                @foreach (var kvp in FinanceRecord.FinanceRecordLists.OrderBy(k => k.Key))
                {
                    var updatePercent = kvp.Key;
                    var update = kvp.Value;

                    <div class="border rounded p-3 mb-3 bg-light">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="fw-bold mb-0">Update @updatePercent%</h5>
                                <button class="btn btn-sm btn-danger" disabled="@(!bCanEdit)"
                                    @onclick="() => RemoveUpdate(updatePercent)">
                                Remove
                            </button>
                        </div>

                        <div class="row g-3">
                            <div class="col-md-3">
                                <label class="form-label fw-bold">Update Percent</label>
                                    <input type="number"
                                           step="0.01"
                                           class="form-control w-50"
                                           value="@updatePercent"
                                           @onchange="(e) => ChangeUpdateKey(updatePercent, e.Value?.ToString())" />
                            </div>

                            <div class="col-md-3">
                                <label class="form-label fw-bold">Add Date</label>
                                <InputDate class="form-control"
                                           @bind-Value="update.AddDate" />
                            </div>
                        </div>

                        <div class="mt-3">
                            <label class="form-label fw-bold">Support Documents</label>
                            <UploadImageHelper UploadedImages="@update.SupportDocuments"
                                               bNewRequisition="@bCanEdit" />
                        </div>
                    </div>
                }
            }

            <div class="text-end mt-3">
                <button class="btn btn-primary"
                        @onclick="AddUpdate"
                        disabled="@(!bCanEdit)">
                    Add Update
                </button>
            </div>
        </div>
    </div>

    <!-- ============================= -->
    <!-- 4️⃣  ACTION BUTTONS -->
    <!-- ============================= -->
    <div class="text-center mt-4 mb-5">
        <button class="btn btn-success btn-lg me-3 px-4"
                @onclick="SaveRecord"
                disabled="@(!bCanEdit)">
            Save Record
        </button>

            <button class="btn btn-primary btn-lg px-4"
                    @onclick="NotifyPaid"
                    disabled="@(!bCanEdit)">
                Notify Paid
            </button>
    </div>

</div>
}

@code {
    [Parameter] public string? PO_ID { get; set; }
    private bool bCanEdit = false;
    private FinanceRecord FinanceRecord = new();
    private PurchaseOrderRecord PurchaseOrderRecord = new();
    protected async override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(PO_ID))
        {
            // Prevent access without PO_ID
            NavigationManager.NavigateTo("/error?msg=PO_ID missing");
            return;
        }

        try
        {
            var url = NavigationManager.ToAbsoluteUri($"api/finance/get?requisitionNumber={PO_ID}");
            var record = await Http.GetFromJsonAsync<FinanceRecord>(url);

            if (record != null)
            {
                FinanceRecord = record;
            }
            EDepartment MyDepartment = await GeneralLibrary.GetCurrentDepartmentRole(JS);
            if (MyDepartment==EDepartment.Finance)
            {
                await JS.InvokeVoidAsync("console.log", $"PR_Finance,OnInitialized, finance department");
                bCanEdit = true;
            }
            else
            {
                await JS.InvokeVoidAsync("console.log", $"PR_Finance,OnInitialized, not finance department");
            }

        }
        catch (Exception ex)
        {

            await JS.InvokeVoidAsync("console.log", $"PR_Finance,OnInitialized, exception{ex}");
        }

        // Initialize record with provided PO_ID
        FinanceRecord.PO_ID = PO_ID;
        await SetupPO(PO_ID);
        StateHasChanged();
    }

    private async Task SetupPO(string PO_ID)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(PO_ID))
            {
                return;
            }

            // Prepare the request payload
            var requisitionNumbers = new List<string> { PO_ID };

            // Call the API endpoint
            var response = await Http.PostAsJsonAsync("api/po/get", requisitionNumbers);

            if (response.IsSuccessStatusCode)
            {
                var poRecords = await response.Content.ReadFromJsonAsync<List<PurchaseOrderRecord>>();

                if (poRecords != null && poRecords.Count > 0)
                {
                    var po = poRecords.First();
                    Console.WriteLine($"✅ Successfully loaded PO {po.PO_ID}");


                    PurchaseOrderRecord = po; 
                }
                else
                {
                    Console.WriteLine($"⚠️ No record found for PO {PO_ID}");
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ Failed to load PO {PO_ID}: {response.StatusCode} - {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Exception in SetupPO: {ex.Message}");
        }
    }

    private void AddUpdate()
    {
        decimal newKey = 0m;
        while (FinanceRecord.FinanceRecordLists.ContainsKey(newKey))
            newKey += 10m; // auto increment key if exists

        FinanceRecord.FinanceRecordLists[newKey] = new FinanceRecordUpdate();
    }

    private async void ChangeUpdateKey(decimal oldKey, string? newKeyText)
    {
        if (decimal.TryParse(newKeyText, out var newKey))
        {
            if (FinanceRecord.FinanceRecordLists.ContainsKey(newKey))
            {

                await JS.InvokeVoidAsync("alert", $"Update percent {newKey}% already exists!");
                return;
            }


            var item = FinanceRecord.FinanceRecordLists[oldKey];
            FinanceRecord.FinanceRecordLists.Remove(oldKey);
            FinanceRecord.FinanceRecordLists[newKey] = item;
        }
    }

    private void RemoveUpdate(decimal updatePercent)
    {
        FinanceRecord.FinanceRecordLists.Remove(updatePercent);
    }
    private async Task SaveRecord()
    {

        var response = await Http.PostAsJsonAsync("api/finance/submit", FinanceRecord);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", $"FinanceSubmitSuccess!");
        }
    }
    private async void NotifyPaid()
    {
        PurchaseOrderRecord.InvoiceInfo.PaymentStatus = EPaymentStatus.Paid;
        FinanceRecord.PaymentStatus = EPaymentStatus.Paid;
        await SaveRecord();
        EmailWorkflowService MyEmailHelper = new EmailWorkflowService(Http, NavigationManager, JS);
        await MyEmailHelper.SendEmailToRelevantPartyFinance(PurchaseOrderRecord);
    }

    private void SendEmailToPurchaseManager()
    {
        
    }

}