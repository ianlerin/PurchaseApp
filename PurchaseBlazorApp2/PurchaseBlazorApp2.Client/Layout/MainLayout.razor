@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PurchaseBlazorApp2.Client.Components.Pages.Login
@using PurchaseBlazorApp2.Components.Global
@inherits LayoutComponentBase

@inject ClientGlobalVar GlobalVar
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider
@inject IServiceProvider ServiceProvider

@if (!_initialized)
{
    <p>Loading authentication state...</p>
}
else if (!_isLoggedIn)
{
    <MainLogin />
}
else
{
    <div class="layout-container">
        <NavMenu />
        <main>
            @Body
        </main>
    </div>
}

@code {
    private bool _initialized;
    private bool _isLoggedIn;
    private bool _subscribed;

    protected override void OnInitialized()
    {
        if (!_subscribed)
        {
            AuthStateProvider.AuthenticationStateChanged += OnAuthStateChanged;
            _subscribed = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("console.log", "🔄 First render - fetching AuthenticationState...");
                var state = await AuthStateProvider.GetAuthenticationStateAsync();

                await JS.InvokeVoidAsync("console.log",
                    $"🔑 AuthState: IsAuthenticated = {state.User.Identity?.IsAuthenticated}");

                await UpdateLoginState(state);

                _initialized = true;
                await JS.InvokeVoidAsync("console.log", "✅ _initialized set to true, triggering StateHasChanged()");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", $"❗ Error in OnAfterRenderAsync: {ex.Message}");
            }
        }
    }

    private async Task UpdateLoginState(AuthenticationState state)
    {
        _isLoggedIn = state.User.Identity?.IsAuthenticated == true;

        if (_isLoggedIn)
        {
            var tokenProvider = ServiceProvider.GetService<IAccessTokenProvider>();

            if (tokenProvider == null)
            {
                await JS.InvokeVoidAsync("console.warn", "⚠️ IAccessTokenProvider is NULL - check AddMsalAuthentication setup.");
                _isLoggedIn = false;
                return;
            }

            var tokenResult = await tokenProvider.RequestAccessToken();

            if (tokenResult.TryGetToken(out var token))
            {
                await JS.InvokeVoidAsync("console.log", $"🔑 Access token acquired: {token.Value.Substring(0, 20)}...");
            }
            else
            {
                await JS.InvokeVoidAsync("console.warn", "⚠️ No access token available yet.");
                _isLoggedIn = false;
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        var state = await task;
        await JS.InvokeVoidAsync("console.log", "🔄 AuthenticationStateChanged fired.");
        await UpdateLoginState(state);
    }

    public void Dispose()
    {
        if (_subscribed)
        {
            AuthStateProvider.AuthenticationStateChanged -= OnAuthStateChanged;
        }
    }
}