@page "/mainlayout"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PurchaseBlazorApp2.Client.Components.Pages.Login
@using PurchaseBlazorApp2.Components.Global
@inherits LayoutComponentBase


@inject NavigationManager NavigationManager
@inject ClientGlobalVar GlobalVar
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider
@inject IServiceProvider ServiceProvider

@if (!_isLoggedIn)
{
    <MainLogin />
}
else
{
     <div class="layout-container">
        <div class="sidebar">
            <NavMenu />
        </div>

        <main class="main-content">
            <div class="top-row px-4">
                <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
            </div>
            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
}

@code {
    private bool _initialized;
    private bool _isLoggedIn;
    private bool _subscribed;

    protected override void OnInitialized()
    {
        if (!_subscribed)
        {
            // Use async lambda to avoid async void
            AuthStateProvider.AuthenticationStateChanged += async (task) =>
            {
                try
                {
                    var state = await task;
                    if (OperatingSystem.IsBrowser())
                        await JS.InvokeVoidAsync("console.log", "🔄 AuthenticationStateChanged fired.");
                    await UpdateLoginState(state);
                }
                catch (Exception ex)
                {
                    if (OperatingSystem.IsBrowser())
                        await JS.InvokeVoidAsync("console.error", $"Error in AuthStateChanged: {ex}");
                }
            };

            _subscribed = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("console.log", "Mainlayout OnAfterRenderAsync");
        if (!firstRender || !OperatingSystem.IsBrowser())
        {
           
            await JS.InvokeVoidAsync("console.log", "not first render or is browser");
            return;
        }
        

        try
        {
            await JS.InvokeVoidAsync("console.log", "🔄 First render - fetching AuthenticationState...");
            var state = await AuthStateProvider.GetAuthenticationStateAsync();

            await JS.InvokeVoidAsync("console.log",
                $"🔑 AuthState: IsAuthenticated = {state.User.Identity?.IsAuthenticated}");

            await UpdateLoginState(state);

            _initialized = true;
            await JS.InvokeVoidAsync("console.log", "✅ _initialized set to true, triggering StateHasChanged()");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            if (OperatingSystem.IsBrowser())
                await JS.InvokeVoidAsync("console.error", $"❗ Error in OnAfterRenderAsync: {ex.Message}");
        }
    }

    private async Task UpdateLoginState(AuthenticationState state)
    {
        _isLoggedIn = state.User.Identity?.IsAuthenticated == true;

        if (_isLoggedIn)
        {
            var tokenProvider = ServiceProvider.GetService<IAccessTokenProvider>();

            if (tokenProvider == null)
            {
                if (OperatingSystem.IsBrowser())
                    await JS.InvokeVoidAsync("console.warn", "⚠️ IAccessTokenProvider is NULL - check AddMsalAuthentication setup.");
                _isLoggedIn = false;
                return;
            }

            var tokenResult = await tokenProvider.RequestAccessToken();

            if (tokenResult.TryGetToken(out var token))
            {
                if (OperatingSystem.IsBrowser())
                    await JS.InvokeVoidAsync("console.log", $"layout Access token acquired: {token.Value.Substring(0, 20)}...");
            }
            else
            {
                if (OperatingSystem.IsBrowser())
                    await JS.InvokeVoidAsync("console.warn", "⚠️ No access token available yet.");
                _isLoggedIn = false;
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        
    }

    // Dummy method to allow safe unsubscribe (optional)
    private Task OnAuthStateChangedSafe(Task<AuthenticationState> task) => Task.CompletedTask;
}